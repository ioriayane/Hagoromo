// This file is generated by "defs2struct.py".
// Please do not edit.

#ifndef LEXICONS_FUNC_CPP
#define LEXICONS_FUNC_CPP

#include "lexicons_func.h"
#include "lexicons_func_unknown.h"

namespace AtProtocolType {
// app.bsky.graph.defs
namespace AppBskyGraphDefs {
void copyListPurpose(const QJsonValue &src, AppBskyGraphDefs::ListPurpose &dest)
{
    dest = src.toString();
}
void copyListViewerState(const QJsonObject &src, AppBskyGraphDefs::ListViewerState &dest)
{
    if (!src.isEmpty()) {
        dest.muted = src.value("muted").toBool();
    }
}
void copyListViewBasic(const QJsonObject &src, AppBskyGraphDefs::ListViewBasic &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.cid = src.value("cid").toString();
        dest.name = src.value("name").toString();
        copyListPurpose(src.value("purpose"), dest.purpose);
        dest.avatar = src.value("avatar").toString();
        copyListViewerState(src.value("viewer").toObject(), dest.viewer);
        dest.indexedAt = src.value("indexedAt").toString();
    }
}
void copyListView(const QJsonObject &src, AppBskyGraphDefs::ListView &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.cid = src.value("cid").toString();
        if (dest.creator.isNull())
            dest.creator = QSharedPointer<AppBskyActorDefs::ProfileView>(
                    new AppBskyActorDefs::ProfileView());
        AppBskyActorDefs::copyProfileView(src.value("creator").toObject(), *dest.creator);
        dest.name = src.value("name").toString();
        copyListPurpose(src.value("purpose"), dest.purpose);
        dest.description = src.value("description").toString();
        for (const auto &s : src.value("descriptionFacets").toArray()) {
            QSharedPointer<AppBskyRichtextFacet::Main> child =
                    QSharedPointer<AppBskyRichtextFacet::Main>(new AppBskyRichtextFacet::Main());
            AppBskyRichtextFacet::copyMain(s.toObject(), *child);
            dest.descriptionFacets.append(child);
        }
        dest.avatar = src.value("avatar").toString();
        copyListViewerState(src.value("viewer").toObject(), dest.viewer);
        dest.indexedAt = src.value("indexedAt").toString();
    }
}
void copyListItemView(const QJsonObject &src, AppBskyGraphDefs::ListItemView &dest)
{
    if (!src.isEmpty()) {
        if (dest.subject.isNull())
            dest.subject = QSharedPointer<AppBskyActorDefs::ProfileView>(
                    new AppBskyActorDefs::ProfileView());
        AppBskyActorDefs::copyProfileView(src.value("subject").toObject(), *dest.subject);
    }
}
}
// app.bsky.actor.defs
namespace AppBskyActorDefs {
void copyViewerState(const QJsonObject &src, AppBskyActorDefs::ViewerState &dest)
{
    if (!src.isEmpty()) {
        dest.muted = src.value("muted").toBool();
        AppBskyGraphDefs::copyListViewBasic(src.value("mutedByList").toObject(), dest.mutedByList);
        dest.blockedBy = src.value("blockedBy").toBool();
        dest.blocking = src.value("blocking").toString();
        dest.following = src.value("following").toString();
        dest.followedBy = src.value("followedBy").toString();
    }
}
void copyProfileViewBasic(const QJsonObject &src, AppBskyActorDefs::ProfileViewBasic &dest)
{
    if (!src.isEmpty()) {
        dest.did = src.value("did").toString();
        dest.handle = src.value("handle").toString();
        dest.displayName = src.value("displayName").toString();
        dest.avatar = src.value("avatar").toString();
        copyViewerState(src.value("viewer").toObject(), dest.viewer);
        for (const auto &s : src.value("labels").toArray()) {
            ComAtprotoLabelDefs::Label child;
            ComAtprotoLabelDefs::copyLabel(s.toObject(), child);
            dest.labels.append(child);
        }
    }
}
void copyProfileView(const QJsonObject &src, AppBskyActorDefs::ProfileView &dest)
{
    if (!src.isEmpty()) {
        dest.did = src.value("did").toString();
        dest.handle = src.value("handle").toString();
        dest.displayName = src.value("displayName").toString();
        dest.description = src.value("description").toString();
        dest.avatar = src.value("avatar").toString();
        dest.indexedAt = src.value("indexedAt").toString();
        copyViewerState(src.value("viewer").toObject(), dest.viewer);
        for (const auto &s : src.value("labels").toArray()) {
            ComAtprotoLabelDefs::Label child;
            ComAtprotoLabelDefs::copyLabel(s.toObject(), child);
            dest.labels.append(child);
        }
    }
}
void copyProfileViewDetailed(const QJsonObject &src, AppBskyActorDefs::ProfileViewDetailed &dest)
{
    if (!src.isEmpty()) {
        dest.did = src.value("did").toString();
        dest.handle = src.value("handle").toString();
        dest.displayName = src.value("displayName").toString();
        dest.description = src.value("description").toString();
        dest.avatar = src.value("avatar").toString();
        dest.banner = src.value("banner").toString();
        dest.followersCount = src.value("followersCount").toInt();
        dest.followsCount = src.value("followsCount").toInt();
        dest.postsCount = src.value("postsCount").toInt();
        dest.indexedAt = src.value("indexedAt").toString();
        copyViewerState(src.value("viewer").toObject(), dest.viewer);
        for (const auto &s : src.value("labels").toArray()) {
            ComAtprotoLabelDefs::Label child;
            ComAtprotoLabelDefs::copyLabel(s.toObject(), child);
            dest.labels.append(child);
        }
    }
}
void copyAdultContentPref(const QJsonObject &src, AppBskyActorDefs::AdultContentPref &dest)
{
    if (!src.isEmpty()) {
        dest.enabled = src.value("enabled").toBool();
    }
}
void copyContentLabelPref(const QJsonObject &src, AppBskyActorDefs::ContentLabelPref &dest)
{
    if (!src.isEmpty()) {
        dest.label = src.value("label").toString();
        dest.visibility = src.value("visibility").toString();
    }
}
void copySavedFeedsPref(const QJsonObject &src, AppBskyActorDefs::SavedFeedsPref &dest)
{
    if (!src.isEmpty()) {
        for (const auto &value : src.value("pinned").toArray()) {
            dest.pinned.append(value.toString());
        }
        for (const auto &value : src.value("saved").toArray()) {
            dest.saved.append(value.toString());
        }
    }
}
}
// com.atproto.label.defs
namespace ComAtprotoLabelDefs {
void copyLabel(const QJsonObject &src, ComAtprotoLabelDefs::Label &dest)
{
    if (!src.isEmpty()) {
        dest.src = src.value("src").toString();
        dest.uri = src.value("uri").toString();
        dest.cid = src.value("cid").toString();
        dest.val = src.value("val").toString();
        dest.neg = src.value("neg").toBool();
        dest.cts = src.value("cts").toString();
    }
}
}
// app.bsky.actor.profile
namespace AppBskyActorProfile {
void copyMain(const QJsonObject &src, AppBskyActorProfile::Main &dest)
{
    if (!src.isEmpty()) {
        dest.displayName = src.value("displayName").toString();
        dest.description = src.value("description").toString();
    }
}
}
// app.bsky.embed.external
namespace AppBskyEmbedExternal {
void copyExternal(const QJsonObject &src, AppBskyEmbedExternal::External &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.title = src.value("title").toString();
        dest.description = src.value("description").toString();
    }
}
void copyMain(const QJsonObject &src, AppBskyEmbedExternal::Main &dest)
{
    if (!src.isEmpty()) {
        copyExternal(src.value("external").toObject(), dest.external);
    }
}
void copyViewExternal(const QJsonObject &src, AppBskyEmbedExternal::ViewExternal &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.title = src.value("title").toString();
        dest.description = src.value("description").toString();
        dest.thumb = src.value("thumb").toString();
    }
}
void copyView(const QJsonObject &src, AppBskyEmbedExternal::View &dest)
{
    if (!src.isEmpty()) {
        copyViewExternal(src.value("external").toObject(), dest.external);
    }
}
}
// app.bsky.embed.images
namespace AppBskyEmbedImages {
void copyImage(const QJsonObject &src, AppBskyEmbedImages::Image &dest)
{
    if (!src.isEmpty()) {
        dest.alt = src.value("alt").toString();
    }
}
void copyMain(const QJsonObject &src, AppBskyEmbedImages::Main &dest)
{
    if (!src.isEmpty()) {
        for (const auto &s : src.value("images").toArray()) {
            Image child;
            copyImage(s.toObject(), child);
            dest.images.append(child);
        }
    }
}
void copyViewImage(const QJsonObject &src, AppBskyEmbedImages::ViewImage &dest)
{
    if (!src.isEmpty()) {
        dest.thumb = src.value("thumb").toString();
        dest.fullsize = src.value("fullsize").toString();
        dest.alt = src.value("alt").toString();
    }
}
void copyView(const QJsonObject &src, AppBskyEmbedImages::View &dest)
{
    if (!src.isEmpty()) {
        for (const auto &s : src.value("images").toArray()) {
            ViewImage child;
            copyViewImage(s.toObject(), child);
            dest.images.append(child);
        }
    }
}
}
// com.atproto.repo.strongRef
namespace ComAtprotoRepoStrongRef {
void copyMain(const QJsonObject &src, ComAtprotoRepoStrongRef::Main &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.cid = src.value("cid").toString();
    }
}
}
// app.bsky.embed.record
namespace AppBskyEmbedRecord {
void copyMain(const QJsonObject &src, AppBskyEmbedRecord::Main &dest)
{
    if (!src.isEmpty()) {
        ComAtprotoRepoStrongRef::copyMain(src.value("record").toObject(), dest.record);
    }
}
void copyViewRecord(const QJsonObject &src, AppBskyEmbedRecord::ViewRecord &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.cid = src.value("cid").toString();
        AppBskyActorDefs::copyProfileViewBasic(src.value("author").toObject(), dest.author);
        LexiconsTypeUnknown::copyUnknown(src.value("value").toObject(), dest.value);
        for (const auto &s : src.value("labels").toArray()) {
            ComAtprotoLabelDefs::Label child;
            ComAtprotoLabelDefs::copyLabel(s.toObject(), child);
            dest.labels.append(child);
        }
        // array<union> embeds
        for (const auto &value : src.value("embeds").toArray()) {
            QString value_type = value.toObject().value("$type").toString();
            if (value_type == QStringLiteral("app.bsky.embed.images#view")) {
                AppBskyEmbedImages::View child;
                AppBskyEmbedImages::copyView(value.toObject(), child);
                dest.embeds_AppBskyEmbedImages_View.append(child);
            }
        }
        for (const auto &value : src.value("embeds").toArray()) {
            QString value_type = value.toObject().value("$type").toString();
            if (value_type == QStringLiteral("app.bsky.embed.external#view")) {
                AppBskyEmbedExternal::View child;
                AppBskyEmbedExternal::copyView(value.toObject(), child);
                dest.embeds_AppBskyEmbedExternal_View.append(child);
            }
        }
        for (const auto &value : src.value("embeds").toArray()) {
            QString value_type = value.toObject().value("$type").toString();
            if (value_type == QStringLiteral("app.bsky.embed.record#view")) {
                QSharedPointer<AppBskyEmbedRecord::View> child =
                        QSharedPointer<AppBskyEmbedRecord::View>(new AppBskyEmbedRecord::View());
                AppBskyEmbedRecord::copyView(value.toObject(), *child);
                dest.embeds_AppBskyEmbedRecord_View.append(child);
            }
        }
        for (const auto &value : src.value("embeds").toArray()) {
            QString value_type = value.toObject().value("$type").toString();
            if (value_type == QStringLiteral("app.bsky.embed.recordWithMedia#view")) {
                AppBskyEmbedRecordWithMedia::View child;
                AppBskyEmbedRecordWithMedia::copyView(value.toObject(), child);
                dest.embeds_AppBskyEmbedRecordWithMedia_View.append(child);
            }
        }
        dest.indexedAt = src.value("indexedAt").toString();
    }
}
void copyViewNotFound(const QJsonObject &src, AppBskyEmbedRecord::ViewNotFound &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
    }
}
void copyViewBlocked(const QJsonObject &src, AppBskyEmbedRecord::ViewBlocked &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
    }
}
void copyView(const QJsonObject &src, AppBskyEmbedRecord::View &dest)
{
    if (!src.isEmpty()) {
        QString record_type = src.value("record").toObject().value("$type").toString();
        if (record_type == QStringLiteral("app.bsky.embed.record#viewRecord")) {
            dest.record_type = AppBskyEmbedRecord::ViewRecordType::record_ViewRecord;
            AppBskyEmbedRecord::copyViewRecord(src.value("record").toObject(),
                                               dest.record_ViewRecord);
        }
        if (record_type == QStringLiteral("app.bsky.embed.record#viewNotFound")) {
            dest.record_type = AppBskyEmbedRecord::ViewRecordType::record_ViewNotFound;
            AppBskyEmbedRecord::copyViewNotFound(src.value("record").toObject(),
                                                 dest.record_ViewNotFound);
        }
        if (record_type == QStringLiteral("app.bsky.embed.record#viewBlocked")) {
            dest.record_type = AppBskyEmbedRecord::ViewRecordType::record_ViewBlocked;
            AppBskyEmbedRecord::copyViewBlocked(src.value("record").toObject(),
                                                dest.record_ViewBlocked);
        }
        if (record_type == QStringLiteral("app.bsky.feed.defs#generatorView")) {
            dest.record_type =
                    AppBskyEmbedRecord::ViewRecordType::record_AppBskyFeedDefs_GeneratorView;
            AppBskyFeedDefs::copyGeneratorView(src.value("record").toObject(),
                                               dest.record_AppBskyFeedDefs_GeneratorView);
        }
        if (record_type == QStringLiteral("app.bsky.graph.defs#listView")) {
            dest.record_type = AppBskyEmbedRecord::ViewRecordType::record_AppBskyGraphDefs_ListView;
            AppBskyGraphDefs::copyListView(src.value("record").toObject(),
                                           dest.record_AppBskyGraphDefs_ListView);
        }
    }
}
}
// app.bsky.embed.recordWithMedia
namespace AppBskyEmbedRecordWithMedia {
void copyView(const QJsonObject &src, AppBskyEmbedRecordWithMedia::View &dest)
{
    if (!src.isEmpty()) {
        if (dest.record.isNull())
            dest.record = QSharedPointer<AppBskyEmbedRecord::View>(new AppBskyEmbedRecord::View());
        AppBskyEmbedRecord::copyView(src.value("record").toObject(), *dest.record);
        QString media_type = src.value("media").toObject().value("$type").toString();
        if (media_type == QStringLiteral("app.bsky.embed.images#view")) {
            dest.media_type =
                    AppBskyEmbedRecordWithMedia::ViewMediaType::media_AppBskyEmbedImages_View;
            AppBskyEmbedImages::copyView(src.value("media").toObject(),
                                         dest.media_AppBskyEmbedImages_View);
        }
        if (media_type == QStringLiteral("app.bsky.embed.external#view")) {
            dest.media_type =
                    AppBskyEmbedRecordWithMedia::ViewMediaType::media_AppBskyEmbedExternal_View;
            AppBskyEmbedExternal::copyView(src.value("media").toObject(),
                                           dest.media_AppBskyEmbedExternal_View);
        }
    }
}
void copyMain(const QJsonObject &src, AppBskyEmbedRecordWithMedia::Main &dest)
{
    if (!src.isEmpty()) {
        if (dest.record.isNull())
            dest.record = QSharedPointer<AppBskyEmbedRecord::Main>(new AppBskyEmbedRecord::Main());
        AppBskyEmbedRecord::copyMain(src.value("record").toObject(), *dest.record);
        QString media_type = src.value("media").toObject().value("$type").toString();
        if (media_type == QStringLiteral("app.bsky.embed.images")) {
            dest.media_type =
                    AppBskyEmbedRecordWithMedia::MainMediaType::media_AppBskyEmbedImages_Main;
            AppBskyEmbedImages::copyMain(src.value("media").toObject(),
                                         dest.media_AppBskyEmbedImages_Main);
        }
        if (media_type == QStringLiteral("app.bsky.embed.external")) {
            dest.media_type =
                    AppBskyEmbedRecordWithMedia::MainMediaType::media_AppBskyEmbedExternal_Main;
            AppBskyEmbedExternal::copyMain(src.value("media").toObject(),
                                           dest.media_AppBskyEmbedExternal_Main);
        }
    }
}
}
// app.bsky.richtext.facet
namespace AppBskyRichtextFacet {
void copyByteSlice(const QJsonObject &src, AppBskyRichtextFacet::ByteSlice &dest)
{
    if (!src.isEmpty()) {
        dest.byteStart = src.value("byteStart").toInt();
        dest.byteEnd = src.value("byteEnd").toInt();
    }
}
void copyMention(const QJsonObject &src, AppBskyRichtextFacet::Mention &dest)
{
    if (!src.isEmpty()) {
        dest.did = src.value("did").toString();
    }
}
void copyLink(const QJsonObject &src, AppBskyRichtextFacet::Link &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
    }
}
void copyMain(const QJsonObject &src, AppBskyRichtextFacet::Main &dest)
{
    if (!src.isEmpty()) {
        copyByteSlice(src.value("index").toObject(), dest.index);
        // array<union> features
        for (const auto &value : src.value("features").toArray()) {
            QString value_type = value.toObject().value("$type").toString();
            if (value_type == QStringLiteral("app.bsky.richtext.facet#mention")) {
                AppBskyRichtextFacet::Mention child;
                AppBskyRichtextFacet::copyMention(value.toObject(), child);
                dest.features_Mention.append(child);
            }
        }
        for (const auto &value : src.value("features").toArray()) {
            QString value_type = value.toObject().value("$type").toString();
            if (value_type == QStringLiteral("app.bsky.richtext.facet#link")) {
                AppBskyRichtextFacet::Link child;
                AppBskyRichtextFacet::copyLink(value.toObject(), child);
                dest.features_Link.append(child);
            }
        }
    }
}
}
// app.bsky.feed.defs
namespace AppBskyFeedDefs {
void copyGeneratorViewerState(const QJsonObject &src, AppBskyFeedDefs::GeneratorViewerState &dest)
{
    if (!src.isEmpty()) {
        dest.like = src.value("like").toString();
    }
}
void copyGeneratorView(const QJsonObject &src, AppBskyFeedDefs::GeneratorView &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.cid = src.value("cid").toString();
        dest.did = src.value("did").toString();
        AppBskyActorDefs::copyProfileView(src.value("creator").toObject(), dest.creator);
        dest.displayName = src.value("displayName").toString();
        dest.description = src.value("description").toString();
        for (const auto &s : src.value("descriptionFacets").toArray()) {
            AppBskyRichtextFacet::Main child;
            AppBskyRichtextFacet::copyMain(s.toObject(), child);
            dest.descriptionFacets.append(child);
        }
        dest.avatar = src.value("avatar").toString();
        dest.likeCount = src.value("likeCount").toInt();
        copyGeneratorViewerState(src.value("viewer").toObject(), dest.viewer);
        dest.indexedAt = src.value("indexedAt").toString();
    }
}
void copyViewerState(const QJsonObject &src, AppBskyFeedDefs::ViewerState &dest)
{
    if (!src.isEmpty()) {
        dest.repost = src.value("repost").toString();
        dest.like = src.value("like").toString();
    }
}
void copyPostView(const QJsonObject &src, AppBskyFeedDefs::PostView &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.cid = src.value("cid").toString();
        AppBskyActorDefs::copyProfileViewBasic(src.value("author").toObject(), dest.author);
        LexiconsTypeUnknown::copyUnknown(src.value("record").toObject(), dest.record);
        QString embed_type = src.value("embed").toObject().value("$type").toString();
        if (embed_type == QStringLiteral("app.bsky.embed.images#view")) {
            dest.embed_type = AppBskyFeedDefs::PostViewEmbedType::embed_AppBskyEmbedImages_View;
            AppBskyEmbedImages::copyView(src.value("embed").toObject(),
                                         dest.embed_AppBskyEmbedImages_View);
        }
        if (embed_type == QStringLiteral("app.bsky.embed.external#view")) {
            dest.embed_type = AppBskyFeedDefs::PostViewEmbedType::embed_AppBskyEmbedExternal_View;
            AppBskyEmbedExternal::copyView(src.value("embed").toObject(),
                                           dest.embed_AppBskyEmbedExternal_View);
        }
        // union *embed app.bsky.embed.record#view
        if (embed_type == QStringLiteral("app.bsky.embed.record#view")) {
            dest.embed_type = AppBskyFeedDefs::PostViewEmbedType::embed_AppBskyEmbedRecord_View;
            if (dest.embed_AppBskyEmbedRecord_View.isNull())
                dest.embed_AppBskyEmbedRecord_View =
                        QSharedPointer<AppBskyEmbedRecord::View>(new AppBskyEmbedRecord::View());
            AppBskyEmbedRecord::copyView(src.value("embed").toObject(),
                                         *dest.embed_AppBskyEmbedRecord_View);
        }
        if (embed_type == QStringLiteral("app.bsky.embed.recordWithMedia#view")) {
            dest.embed_type =
                    AppBskyFeedDefs::PostViewEmbedType::embed_AppBskyEmbedRecordWithMedia_View;
            AppBskyEmbedRecordWithMedia::copyView(src.value("embed").toObject(),
                                                  dest.embed_AppBskyEmbedRecordWithMedia_View);
        }
        dest.replyCount = src.value("replyCount").toInt();
        dest.repostCount = src.value("repostCount").toInt();
        dest.likeCount = src.value("likeCount").toInt();
        dest.indexedAt = src.value("indexedAt").toString();
        copyViewerState(src.value("viewer").toObject(), dest.viewer);
        for (const auto &s : src.value("labels").toArray()) {
            ComAtprotoLabelDefs::Label child;
            ComAtprotoLabelDefs::copyLabel(s.toObject(), child);
            dest.labels.append(child);
        }
    }
}
void copyNotFoundPost(const QJsonObject &src, AppBskyFeedDefs::NotFoundPost &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.notFound = src.value("notFound").toBool();
    }
}
void copyBlockedPost(const QJsonObject &src, AppBskyFeedDefs::BlockedPost &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.blocked = src.value("blocked").toBool();
    }
}
void copyReplyRef(const QJsonObject &src, AppBskyFeedDefs::ReplyRef &dest)
{
    if (!src.isEmpty()) {
        QString root_type = src.value("root").toObject().value("$type").toString();
        if (root_type == QStringLiteral("app.bsky.feed.defs#postView")) {
            dest.root_type = AppBskyFeedDefs::ReplyRefRootType::root_PostView;
            AppBskyFeedDefs::copyPostView(src.value("root").toObject(), dest.root_PostView);
        }
        if (root_type == QStringLiteral("app.bsky.feed.defs#notFoundPost")) {
            dest.root_type = AppBskyFeedDefs::ReplyRefRootType::root_NotFoundPost;
            AppBskyFeedDefs::copyNotFoundPost(src.value("root").toObject(), dest.root_NotFoundPost);
        }
        if (root_type == QStringLiteral("app.bsky.feed.defs#blockedPost")) {
            dest.root_type = AppBskyFeedDefs::ReplyRefRootType::root_BlockedPost;
            AppBskyFeedDefs::copyBlockedPost(src.value("root").toObject(), dest.root_BlockedPost);
        }
        QString parent_type = src.value("parent").toObject().value("$type").toString();
        if (parent_type == QStringLiteral("app.bsky.feed.defs#postView")) {
            dest.parent_type = AppBskyFeedDefs::ReplyRefParentType::parent_PostView;
            AppBskyFeedDefs::copyPostView(src.value("parent").toObject(), dest.parent_PostView);
        }
        if (parent_type == QStringLiteral("app.bsky.feed.defs#notFoundPost")) {
            dest.parent_type = AppBskyFeedDefs::ReplyRefParentType::parent_NotFoundPost;
            AppBskyFeedDefs::copyNotFoundPost(src.value("parent").toObject(),
                                              dest.parent_NotFoundPost);
        }
        if (parent_type == QStringLiteral("app.bsky.feed.defs#blockedPost")) {
            dest.parent_type = AppBskyFeedDefs::ReplyRefParentType::parent_BlockedPost;
            AppBskyFeedDefs::copyBlockedPost(src.value("parent").toObject(),
                                             dest.parent_BlockedPost);
        }
    }
}
void copyReasonRepost(const QJsonObject &src, AppBskyFeedDefs::ReasonRepost &dest)
{
    if (!src.isEmpty()) {
        AppBskyActorDefs::copyProfileViewBasic(src.value("by").toObject(), dest.by);
        dest.indexedAt = src.value("indexedAt").toString();
    }
}
void copyFeedViewPost(const QJsonObject &src, AppBskyFeedDefs::FeedViewPost &dest)
{
    if (!src.isEmpty()) {
        copyPostView(src.value("post").toObject(), dest.post);
        copyReplyRef(src.value("reply").toObject(), dest.reply);
        QString reason_type = src.value("reason").toObject().value("$type").toString();
        if (reason_type == QStringLiteral("app.bsky.feed.defs#reasonRepost")) {
            dest.reason_type = AppBskyFeedDefs::FeedViewPostReasonType::reason_ReasonRepost;
            AppBskyFeedDefs::copyReasonRepost(src.value("reason").toObject(),
                                              dest.reason_ReasonRepost);
        }
    }
}
void copyThreadViewPost(const QJsonObject &src, AppBskyFeedDefs::ThreadViewPost &dest)
{
    if (!src.isEmpty()) {
        copyPostView(src.value("post").toObject(), dest.post);
        QString parent_type = src.value("parent").toObject().value("$type").toString();
        // union *parent #threadViewPost
        if (parent_type == QStringLiteral("app.bsky.feed.defs#threadViewPost")) {
            dest.parent_type = AppBskyFeedDefs::ThreadViewPostParentType::parent_ThreadViewPost;
            if (dest.parent_ThreadViewPost.isNull())
                dest.parent_ThreadViewPost = QSharedPointer<AppBskyFeedDefs::ThreadViewPost>(
                        new AppBskyFeedDefs::ThreadViewPost());
            AppBskyFeedDefs::copyThreadViewPost(src.value("parent").toObject(),
                                                *dest.parent_ThreadViewPost);
        }
        if (parent_type == QStringLiteral("app.bsky.feed.defs#notFoundPost")) {
            dest.parent_type = AppBskyFeedDefs::ThreadViewPostParentType::parent_NotFoundPost;
            AppBskyFeedDefs::copyNotFoundPost(src.value("parent").toObject(),
                                              dest.parent_NotFoundPost);
        }
        if (parent_type == QStringLiteral("app.bsky.feed.defs#blockedPost")) {
            dest.parent_type = AppBskyFeedDefs::ThreadViewPostParentType::parent_BlockedPost;
            AppBskyFeedDefs::copyBlockedPost(src.value("parent").toObject(),
                                             dest.parent_BlockedPost);
        }
        // array<union> replies
        for (const auto &value : src.value("replies").toArray()) {
            QString value_type = value.toObject().value("$type").toString();
            if (value_type == QStringLiteral("app.bsky.feed.defs#threadViewPost")) {
                QSharedPointer<AppBskyFeedDefs::ThreadViewPost> child =
                        QSharedPointer<AppBskyFeedDefs::ThreadViewPost>(
                                new AppBskyFeedDefs::ThreadViewPost());
                AppBskyFeedDefs::copyThreadViewPost(value.toObject(), *child);
                dest.replies_ThreadViewPost.append(child);
            }
        }
        for (const auto &value : src.value("replies").toArray()) {
            QString value_type = value.toObject().value("$type").toString();
            if (value_type == QStringLiteral("app.bsky.feed.defs#notFoundPost")) {
                AppBskyFeedDefs::NotFoundPost child;
                AppBskyFeedDefs::copyNotFoundPost(value.toObject(), child);
                dest.replies_NotFoundPost.append(child);
            }
        }
        for (const auto &value : src.value("replies").toArray()) {
            QString value_type = value.toObject().value("$type").toString();
            if (value_type == QStringLiteral("app.bsky.feed.defs#blockedPost")) {
                AppBskyFeedDefs::BlockedPost child;
                AppBskyFeedDefs::copyBlockedPost(value.toObject(), child);
                dest.replies_BlockedPost.append(child);
            }
        }
    }
}
void copySkeletonReasonRepost(const QJsonObject &src, AppBskyFeedDefs::SkeletonReasonRepost &dest)
{
    if (!src.isEmpty()) {
        dest.repost = src.value("repost").toString();
    }
}
void copySkeletonFeedPost(const QJsonObject &src, AppBskyFeedDefs::SkeletonFeedPost &dest)
{
    if (!src.isEmpty()) {
        dest.post = src.value("post").toString();
        QString reason_type = src.value("reason").toObject().value("$type").toString();
        if (reason_type == QStringLiteral("app.bsky.feed.defs#skeletonReasonRepost")) {
            dest.reason_type =
                    AppBskyFeedDefs::SkeletonFeedPostReasonType::reason_SkeletonReasonRepost;
            AppBskyFeedDefs::copySkeletonReasonRepost(src.value("reason").toObject(),
                                                      dest.reason_SkeletonReasonRepost);
        }
    }
}
}
// app.bsky.feed.describeFeedGenerator
namespace AppBskyFeedDescribeFeedGenerator {
void copyFeed(const QJsonObject &src, AppBskyFeedDescribeFeedGenerator::Feed &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
    }
}
void copyLinks(const QJsonObject &src, AppBskyFeedDescribeFeedGenerator::Links &dest)
{
    if (!src.isEmpty()) {
        dest.privacyPolicy = src.value("privacyPolicy").toString();
        dest.termsOfService = src.value("termsOfService").toString();
    }
}
}
// app.bsky.feed.generator
namespace AppBskyFeedGenerator {
void copyMain(const QJsonObject &src, AppBskyFeedGenerator::Main &dest)
{
    if (!src.isEmpty()) {
        dest.did = src.value("did").toString();
        dest.displayName = src.value("displayName").toString();
        dest.description = src.value("description").toString();
        for (const auto &s : src.value("descriptionFacets").toArray()) {
            AppBskyRichtextFacet::Main child;
            AppBskyRichtextFacet::copyMain(s.toObject(), child);
            dest.descriptionFacets.append(child);
        }
        dest.createdAt = src.value("createdAt").toString();
    }
}
}
// app.bsky.feed.getLikes
namespace AppBskyFeedGetLikes {
void copyLike(const QJsonObject &src, AppBskyFeedGetLikes::Like &dest)
{
    if (!src.isEmpty()) {
        dest.indexedAt = src.value("indexedAt").toString();
        dest.createdAt = src.value("createdAt").toString();
        AppBskyActorDefs::copyProfileView(src.value("actor").toObject(), dest.actor);
    }
}
}
// app.bsky.feed.like
namespace AppBskyFeedLike {
void copyMain(const QJsonObject &src, AppBskyFeedLike::Main &dest)
{
    if (!src.isEmpty()) {
        ComAtprotoRepoStrongRef::copyMain(src.value("subject").toObject(), dest.subject);
        dest.createdAt = src.value("createdAt").toString();
    }
}
}
// app.bsky.feed.post
namespace AppBskyFeedPost {
void copyTextSlice(const QJsonObject &src, AppBskyFeedPost::TextSlice &dest)
{
    if (!src.isEmpty()) {
        dest.start = src.value("start").toInt();
        dest.end = src.value("end").toInt();
    }
}
void copyEntity(const QJsonObject &src, AppBskyFeedPost::Entity &dest)
{
    if (!src.isEmpty()) {
        copyTextSlice(src.value("index").toObject(), dest.index);
        dest.type = src.value("type").toString();
        dest.value = src.value("value").toString();
    }
}
void copyReplyRef(const QJsonObject &src, AppBskyFeedPost::ReplyRef &dest)
{
    if (!src.isEmpty()) {
        ComAtprotoRepoStrongRef::copyMain(src.value("root").toObject(), dest.root);
        ComAtprotoRepoStrongRef::copyMain(src.value("parent").toObject(), dest.parent);
    }
}
void copyMain(const QJsonObject &src, AppBskyFeedPost::Main &dest)
{
    if (!src.isEmpty()) {
        dest.text = src.value("text").toString();
        for (const auto &s : src.value("entities").toArray()) {
            Entity child;
            copyEntity(s.toObject(), child);
            dest.entities.append(child);
        }
        for (const auto &s : src.value("facets").toArray()) {
            AppBskyRichtextFacet::Main child;
            AppBskyRichtextFacet::copyMain(s.toObject(), child);
            dest.facets.append(child);
        }
        copyReplyRef(src.value("reply").toObject(), dest.reply);
        QString embed_type = src.value("embed").toObject().value("$type").toString();
        if (embed_type == QStringLiteral("app.bsky.embed.images")) {
            dest.embed_type = AppBskyFeedPost::MainEmbedType::embed_AppBskyEmbedImages_Main;
            AppBskyEmbedImages::copyMain(src.value("embed").toObject(),
                                         dest.embed_AppBskyEmbedImages_Main);
        }
        if (embed_type == QStringLiteral("app.bsky.embed.external")) {
            dest.embed_type = AppBskyFeedPost::MainEmbedType::embed_AppBskyEmbedExternal_Main;
            AppBskyEmbedExternal::copyMain(src.value("embed").toObject(),
                                           dest.embed_AppBskyEmbedExternal_Main);
        }
        if (embed_type == QStringLiteral("app.bsky.embed.record")) {
            dest.embed_type = AppBskyFeedPost::MainEmbedType::embed_AppBskyEmbedRecord_Main;
            AppBskyEmbedRecord::copyMain(src.value("embed").toObject(),
                                         dest.embed_AppBskyEmbedRecord_Main);
        }
        if (embed_type == QStringLiteral("app.bsky.embed.recordWithMedia")) {
            dest.embed_type =
                    AppBskyFeedPost::MainEmbedType::embed_AppBskyEmbedRecordWithMedia_Main;
            AppBskyEmbedRecordWithMedia::copyMain(src.value("embed").toObject(),
                                                  dest.embed_AppBskyEmbedRecordWithMedia_Main);
        }
        for (const auto &value : src.value("langs").toArray()) {
            dest.langs.append(value.toString());
        }
        dest.createdAt = src.value("createdAt").toString();
    }
}
}
// app.bsky.feed.repost
namespace AppBskyFeedRepost {
void copyMain(const QJsonObject &src, AppBskyFeedRepost::Main &dest)
{
    if (!src.isEmpty()) {
        ComAtprotoRepoStrongRef::copyMain(src.value("subject").toObject(), dest.subject);
        dest.createdAt = src.value("createdAt").toString();
    }
}
}
// app.bsky.graph.block
namespace AppBskyGraphBlock {
void copyMain(const QJsonObject &src, AppBskyGraphBlock::Main &dest)
{
    if (!src.isEmpty()) {
        dest.subject = src.value("subject").toString();
        dest.createdAt = src.value("createdAt").toString();
    }
}
}
// app.bsky.graph.follow
namespace AppBskyGraphFollow {
void copyMain(const QJsonObject &src, AppBskyGraphFollow::Main &dest)
{
    if (!src.isEmpty()) {
        dest.subject = src.value("subject").toString();
        dest.createdAt = src.value("createdAt").toString();
    }
}
}
// app.bsky.graph.list
namespace AppBskyGraphList {
void copyMain(const QJsonObject &src, AppBskyGraphList::Main &dest)
{
    if (!src.isEmpty()) {
        AppBskyGraphDefs::copyListPurpose(src.value("purpose"), dest.purpose);
        dest.name = src.value("name").toString();
        dest.description = src.value("description").toString();
        for (const auto &s : src.value("descriptionFacets").toArray()) {
            AppBskyRichtextFacet::Main child;
            AppBskyRichtextFacet::copyMain(s.toObject(), child);
            dest.descriptionFacets.append(child);
        }
        dest.createdAt = src.value("createdAt").toString();
    }
}
}
// app.bsky.graph.listitem
namespace AppBskyGraphListitem {
void copyMain(const QJsonObject &src, AppBskyGraphListitem::Main &dest)
{
    if (!src.isEmpty()) {
        dest.subject = src.value("subject").toString();
        dest.list = src.value("list").toString();
        dest.createdAt = src.value("createdAt").toString();
    }
}
}
// app.bsky.notification.listNotifications
namespace AppBskyNotificationListNotifications {
void copyNotification(const QJsonObject &src,
                      AppBskyNotificationListNotifications::Notification &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.cid = src.value("cid").toString();
        AppBskyActorDefs::copyProfileView(src.value("author").toObject(), dest.author);
        dest.reason = src.value("reason").toString();
        dest.reasonSubject = src.value("reasonSubject").toString();
        LexiconsTypeUnknown::copyUnknown(src.value("record").toObject(), dest.record);
        dest.isRead = src.value("isRead").toBool();
        dest.indexedAt = src.value("indexedAt").toString();
        for (const auto &s : src.value("labels").toArray()) {
            ComAtprotoLabelDefs::Label child;
            ComAtprotoLabelDefs::copyLabel(s.toObject(), child);
            dest.labels.append(child);
        }
    }
}
}
// com.atproto.admin.defs
namespace ComAtprotoAdminDefs {
void copyActionType(const QJsonValue &src, ComAtprotoAdminDefs::ActionType &dest)
{
    dest = src.toString();
}
void copyRepoRef(const QJsonObject &src, ComAtprotoAdminDefs::RepoRef &dest)
{
    if (!src.isEmpty()) {
        dest.did = src.value("did").toString();
    }
}
void copyActionReversal(const QJsonObject &src, ComAtprotoAdminDefs::ActionReversal &dest)
{
    if (!src.isEmpty()) {
        dest.reason = src.value("reason").toString();
        dest.createdBy = src.value("createdBy").toString();
        dest.createdAt = src.value("createdAt").toString();
    }
}
void copyActionView(const QJsonObject &src, ComAtprotoAdminDefs::ActionView &dest)
{
    if (!src.isEmpty()) {
        dest.id = src.value("id").toInt();
        copyActionType(src.value("action"), dest.action);
        QString subject_type = src.value("subject").toObject().value("$type").toString();
        if (subject_type == QStringLiteral("com.atproto.admin.defs#repoRef")) {
            dest.subject_type = ComAtprotoAdminDefs::ActionViewSubjectType::subject_RepoRef;
            ComAtprotoAdminDefs::copyRepoRef(src.value("subject").toObject(), dest.subject_RepoRef);
        }
        if (subject_type == QStringLiteral("com.atproto.repo.strongRef")) {
            dest.subject_type = ComAtprotoAdminDefs::ActionViewSubjectType::
                    subject_ComAtprotoRepoStrongRef_Main;
            ComAtprotoRepoStrongRef::copyMain(src.value("subject").toObject(),
                                              dest.subject_ComAtprotoRepoStrongRef_Main);
        }
        for (const auto &value : src.value("subjectBlobCids").toArray()) {
            dest.subjectBlobCids.append(value.toString());
        }
        for (const auto &value : src.value("createLabelVals").toArray()) {
            dest.createLabelVals.append(value.toString());
        }
        for (const auto &value : src.value("negateLabelVals").toArray()) {
            dest.negateLabelVals.append(value.toString());
        }
        dest.reason = src.value("reason").toString();
        dest.createdBy = src.value("createdBy").toString();
        dest.createdAt = src.value("createdAt").toString();
        copyActionReversal(src.value("reversal").toObject(), dest.reversal);
        for (const auto &value : src.value("resolvedReportIds").toArray()) {
            dest.resolvedReportIds.append(value.toInt());
        }
    }
}
void copyActionViewCurrent(const QJsonObject &src, ComAtprotoAdminDefs::ActionViewCurrent &dest)
{
    if (!src.isEmpty()) {
        dest.id = src.value("id").toInt();
        copyActionType(src.value("action"), dest.action);
    }
}
void copyModeration(const QJsonObject &src, ComAtprotoAdminDefs::Moderation &dest)
{
    if (!src.isEmpty()) {
        copyActionViewCurrent(src.value("currentAction").toObject(), dest.currentAction);
    }
}
void copyRepoView(const QJsonObject &src, ComAtprotoAdminDefs::RepoView &dest)
{
    if (!src.isEmpty()) {
        dest.did = src.value("did").toString();
        dest.handle = src.value("handle").toString();
        dest.email = src.value("email").toString();
        dest.indexedAt = src.value("indexedAt").toString();
        copyModeration(src.value("moderation").toObject(), dest.moderation);
        ComAtprotoServerDefs::copyInviteCode(src.value("invitedBy").toObject(), dest.invitedBy);
        dest.invitesDisabled = src.value("invitesDisabled").toBool();
    }
}
void copyRepoViewNotFound(const QJsonObject &src, ComAtprotoAdminDefs::RepoViewNotFound &dest)
{
    if (!src.isEmpty()) {
        dest.did = src.value("did").toString();
    }
}
void copyRecordView(const QJsonObject &src, ComAtprotoAdminDefs::RecordView &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.cid = src.value("cid").toString();
        LexiconsTypeUnknown::copyUnknown(src.value("value").toObject(), dest.value);
        for (const auto &value : src.value("blobCids").toArray()) {
            dest.blobCids.append(value.toString());
        }
        dest.indexedAt = src.value("indexedAt").toString();
        copyModeration(src.value("moderation").toObject(), dest.moderation);
        copyRepoView(src.value("repo").toObject(), dest.repo);
    }
}
void copyRecordViewNotFound(const QJsonObject &src, ComAtprotoAdminDefs::RecordViewNotFound &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
    }
}
void copyImageDetails(const QJsonObject &src, ComAtprotoAdminDefs::ImageDetails &dest)
{
    if (!src.isEmpty()) {
        dest.width = src.value("width").toInt();
        dest.height = src.value("height").toInt();
    }
}
void copyVideoDetails(const QJsonObject &src, ComAtprotoAdminDefs::VideoDetails &dest)
{
    if (!src.isEmpty()) {
        dest.width = src.value("width").toInt();
        dest.height = src.value("height").toInt();
        dest.length = src.value("length").toInt();
    }
}
void copyBlobView(const QJsonObject &src, ComAtprotoAdminDefs::BlobView &dest)
{
    if (!src.isEmpty()) {
        dest.cid = src.value("cid").toString();
        dest.mimeType = src.value("mimeType").toString();
        dest.size = src.value("size").toInt();
        dest.createdAt = src.value("createdAt").toString();
        QString details_type = src.value("details").toObject().value("$type").toString();
        if (details_type == QStringLiteral("com.atproto.admin.defs#imageDetails")) {
            dest.details_type = ComAtprotoAdminDefs::BlobViewDetailsType::details_ImageDetails;
            ComAtprotoAdminDefs::copyImageDetails(src.value("details").toObject(),
                                                  dest.details_ImageDetails);
        }
        if (details_type == QStringLiteral("com.atproto.admin.defs#videoDetails")) {
            dest.details_type = ComAtprotoAdminDefs::BlobViewDetailsType::details_VideoDetails;
            ComAtprotoAdminDefs::copyVideoDetails(src.value("details").toObject(),
                                                  dest.details_VideoDetails);
        }
        copyModeration(src.value("moderation").toObject(), dest.moderation);
    }
}
void copyReportView(const QJsonObject &src, ComAtprotoAdminDefs::ReportView &dest)
{
    if (!src.isEmpty()) {
        dest.id = src.value("id").toInt();
        ComAtprotoModerationDefs::copyReasonType(src.value("reasonType"), dest.reasonType);
        dest.reason = src.value("reason").toString();
        dest.subjectRepoHandle = src.value("subjectRepoHandle").toString();
        QString subject_type = src.value("subject").toObject().value("$type").toString();
        if (subject_type == QStringLiteral("com.atproto.admin.defs#repoRef")) {
            dest.subject_type = ComAtprotoAdminDefs::ReportViewSubjectType::subject_RepoRef;
            ComAtprotoAdminDefs::copyRepoRef(src.value("subject").toObject(), dest.subject_RepoRef);
        }
        if (subject_type == QStringLiteral("com.atproto.repo.strongRef")) {
            dest.subject_type = ComAtprotoAdminDefs::ReportViewSubjectType::
                    subject_ComAtprotoRepoStrongRef_Main;
            ComAtprotoRepoStrongRef::copyMain(src.value("subject").toObject(),
                                              dest.subject_ComAtprotoRepoStrongRef_Main);
        }
        dest.reportedBy = src.value("reportedBy").toString();
        dest.createdAt = src.value("createdAt").toString();
        for (const auto &value : src.value("resolvedByActionIds").toArray()) {
            dest.resolvedByActionIds.append(value.toInt());
        }
    }
}
void copyActionViewDetail(const QJsonObject &src, ComAtprotoAdminDefs::ActionViewDetail &dest)
{
    if (!src.isEmpty()) {
        dest.id = src.value("id").toInt();
        copyActionType(src.value("action"), dest.action);
        QString subject_type = src.value("subject").toObject().value("$type").toString();
        if (subject_type == QStringLiteral("com.atproto.admin.defs#repoView")) {
            dest.subject_type = ComAtprotoAdminDefs::ActionViewDetailSubjectType::subject_RepoView;
            ComAtprotoAdminDefs::copyRepoView(src.value("subject").toObject(),
                                              dest.subject_RepoView);
        }
        if (subject_type == QStringLiteral("com.atproto.admin.defs#repoViewNotFound")) {
            dest.subject_type =
                    ComAtprotoAdminDefs::ActionViewDetailSubjectType::subject_RepoViewNotFound;
            ComAtprotoAdminDefs::copyRepoViewNotFound(src.value("subject").toObject(),
                                                      dest.subject_RepoViewNotFound);
        }
        if (subject_type == QStringLiteral("com.atproto.admin.defs#recordView")) {
            dest.subject_type =
                    ComAtprotoAdminDefs::ActionViewDetailSubjectType::subject_RecordView;
            ComAtprotoAdminDefs::copyRecordView(src.value("subject").toObject(),
                                                dest.subject_RecordView);
        }
        if (subject_type == QStringLiteral("com.atproto.admin.defs#recordViewNotFound")) {
            dest.subject_type =
                    ComAtprotoAdminDefs::ActionViewDetailSubjectType::subject_RecordViewNotFound;
            ComAtprotoAdminDefs::copyRecordViewNotFound(src.value("subject").toObject(),
                                                        dest.subject_RecordViewNotFound);
        }
        for (const auto &s : src.value("subjectBlobs").toArray()) {
            BlobView child;
            copyBlobView(s.toObject(), child);
            dest.subjectBlobs.append(child);
        }
        for (const auto &value : src.value("createLabelVals").toArray()) {
            dest.createLabelVals.append(value.toString());
        }
        for (const auto &value : src.value("negateLabelVals").toArray()) {
            dest.negateLabelVals.append(value.toString());
        }
        dest.reason = src.value("reason").toString();
        dest.createdBy = src.value("createdBy").toString();
        dest.createdAt = src.value("createdAt").toString();
        copyActionReversal(src.value("reversal").toObject(), dest.reversal);
        for (const auto &s : src.value("resolvedReports").toArray()) {
            ReportView child;
            copyReportView(s.toObject(), child);
            dest.resolvedReports.append(child);
        }
    }
}
void copyReportViewDetail(const QJsonObject &src, ComAtprotoAdminDefs::ReportViewDetail &dest)
{
    if (!src.isEmpty()) {
        dest.id = src.value("id").toInt();
        ComAtprotoModerationDefs::copyReasonType(src.value("reasonType"), dest.reasonType);
        dest.reason = src.value("reason").toString();
        QString subject_type = src.value("subject").toObject().value("$type").toString();
        if (subject_type == QStringLiteral("com.atproto.admin.defs#repoView")) {
            dest.subject_type = ComAtprotoAdminDefs::ReportViewDetailSubjectType::subject_RepoView;
            ComAtprotoAdminDefs::copyRepoView(src.value("subject").toObject(),
                                              dest.subject_RepoView);
        }
        if (subject_type == QStringLiteral("com.atproto.admin.defs#repoViewNotFound")) {
            dest.subject_type =
                    ComAtprotoAdminDefs::ReportViewDetailSubjectType::subject_RepoViewNotFound;
            ComAtprotoAdminDefs::copyRepoViewNotFound(src.value("subject").toObject(),
                                                      dest.subject_RepoViewNotFound);
        }
        if (subject_type == QStringLiteral("com.atproto.admin.defs#recordView")) {
            dest.subject_type =
                    ComAtprotoAdminDefs::ReportViewDetailSubjectType::subject_RecordView;
            ComAtprotoAdminDefs::copyRecordView(src.value("subject").toObject(),
                                                dest.subject_RecordView);
        }
        if (subject_type == QStringLiteral("com.atproto.admin.defs#recordViewNotFound")) {
            dest.subject_type =
                    ComAtprotoAdminDefs::ReportViewDetailSubjectType::subject_RecordViewNotFound;
            ComAtprotoAdminDefs::copyRecordViewNotFound(src.value("subject").toObject(),
                                                        dest.subject_RecordViewNotFound);
        }
        dest.reportedBy = src.value("reportedBy").toString();
        dest.createdAt = src.value("createdAt").toString();
        for (const auto &s : src.value("resolvedByActions").toArray()) {
            ComAtprotoAdminDefs::ActionView child;
            ComAtprotoAdminDefs::copyActionView(s.toObject(), child);
            dest.resolvedByActions.append(child);
        }
    }
}
void copyModerationDetail(const QJsonObject &src, ComAtprotoAdminDefs::ModerationDetail &dest)
{
    if (!src.isEmpty()) {
        copyActionViewCurrent(src.value("currentAction").toObject(), dest.currentAction);
        for (const auto &s : src.value("actions").toArray()) {
            ActionView child;
            copyActionView(s.toObject(), child);
            dest.actions.append(child);
        }
        for (const auto &s : src.value("reports").toArray()) {
            ReportView child;
            copyReportView(s.toObject(), child);
            dest.reports.append(child);
        }
    }
}
void copyRepoViewDetail(const QJsonObject &src, ComAtprotoAdminDefs::RepoViewDetail &dest)
{
    if (!src.isEmpty()) {
        dest.did = src.value("did").toString();
        dest.handle = src.value("handle").toString();
        dest.email = src.value("email").toString();
        dest.indexedAt = src.value("indexedAt").toString();
        copyModerationDetail(src.value("moderation").toObject(), dest.moderation);
        for (const auto &s : src.value("labels").toArray()) {
            ComAtprotoLabelDefs::Label child;
            ComAtprotoLabelDefs::copyLabel(s.toObject(), child);
            dest.labels.append(child);
        }
        ComAtprotoServerDefs::copyInviteCode(src.value("invitedBy").toObject(), dest.invitedBy);
        for (const auto &s : src.value("invites").toArray()) {
            ComAtprotoServerDefs::InviteCode child;
            ComAtprotoServerDefs::copyInviteCode(s.toObject(), child);
            dest.invites.append(child);
        }
        dest.invitesDisabled = src.value("invitesDisabled").toBool();
    }
}
void copyRecordViewDetail(const QJsonObject &src, ComAtprotoAdminDefs::RecordViewDetail &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.cid = src.value("cid").toString();
        LexiconsTypeUnknown::copyUnknown(src.value("value").toObject(), dest.value);
        for (const auto &s : src.value("blobs").toArray()) {
            BlobView child;
            copyBlobView(s.toObject(), child);
            dest.blobs.append(child);
        }
        for (const auto &s : src.value("labels").toArray()) {
            ComAtprotoLabelDefs::Label child;
            ComAtprotoLabelDefs::copyLabel(s.toObject(), child);
            dest.labels.append(child);
        }
        dest.indexedAt = src.value("indexedAt").toString();
        copyModerationDetail(src.value("moderation").toObject(), dest.moderation);
        copyRepoView(src.value("repo").toObject(), dest.repo);
    }
}
}
// com.atproto.server.defs
namespace ComAtprotoServerDefs {
void copyInviteCodeUse(const QJsonObject &src, ComAtprotoServerDefs::InviteCodeUse &dest)
{
    if (!src.isEmpty()) {
        dest.usedBy = src.value("usedBy").toString();
        dest.usedAt = src.value("usedAt").toString();
    }
}
void copyInviteCode(const QJsonObject &src, ComAtprotoServerDefs::InviteCode &dest)
{
    if (!src.isEmpty()) {
        dest.code = src.value("code").toString();
        dest.available = src.value("available").toInt();
        dest.disabled = src.value("disabled").toBool();
        dest.forAccount = src.value("forAccount").toString();
        dest.createdBy = src.value("createdBy").toString();
        dest.createdAt = src.value("createdAt").toString();
        for (const auto &s : src.value("uses").toArray()) {
            InviteCodeUse child;
            copyInviteCodeUse(s.toObject(), child);
            dest.uses.append(child);
        }
    }
}
}
// com.atproto.moderation.defs
namespace ComAtprotoModerationDefs {
void copyReasonType(const QJsonValue &src, ComAtprotoModerationDefs::ReasonType &dest)
{
    dest = src.toString();
}
}
// com.atproto.label.subscribeLabels
namespace ComAtprotoLabelSubscribeLabels {
void copyLabels(const QJsonObject &src, ComAtprotoLabelSubscribeLabels::Labels &dest)
{
    if (!src.isEmpty()) {
        dest.seq = src.value("seq").toInt();
        for (const auto &s : src.value("labels").toArray()) {
            ComAtprotoLabelDefs::Label child;
            ComAtprotoLabelDefs::copyLabel(s.toObject(), child);
            dest.labels.append(child);
        }
    }
}
void copyInfo(const QJsonObject &src, ComAtprotoLabelSubscribeLabels::Info &dest)
{
    if (!src.isEmpty()) {
        dest.name = src.value("name").toString();
        dest.message = src.value("message").toString();
    }
}
}
// com.atproto.repo.applyWrites
namespace ComAtprotoRepoApplyWrites {
void copyCreate(const QJsonObject &src, ComAtprotoRepoApplyWrites::Create &dest)
{
    if (!src.isEmpty()) {
        dest.collection = src.value("collection").toString();
        dest.rkey = src.value("rkey").toString();
        LexiconsTypeUnknown::copyUnknown(src.value("value").toObject(), dest.value);
    }
}
void copyUpdate(const QJsonObject &src, ComAtprotoRepoApplyWrites::Update &dest)
{
    if (!src.isEmpty()) {
        dest.collection = src.value("collection").toString();
        dest.rkey = src.value("rkey").toString();
        LexiconsTypeUnknown::copyUnknown(src.value("value").toObject(), dest.value);
    }
}
void copyDelete(const QJsonObject &src, ComAtprotoRepoApplyWrites::Delete &dest)
{
    if (!src.isEmpty()) {
        dest.collection = src.value("collection").toString();
        dest.rkey = src.value("rkey").toString();
    }
}
}
// com.atproto.repo.listRecords
namespace ComAtprotoRepoListRecords {
void copyRecord(const QJsonObject &src, ComAtprotoRepoListRecords::Record &dest)
{
    if (!src.isEmpty()) {
        dest.uri = src.value("uri").toString();
        dest.cid = src.value("cid").toString();
        LexiconsTypeUnknown::copyUnknown(src.value("value").toObject(), dest.value);
    }
}
}
// com.atproto.server.createAppPassword
namespace ComAtprotoServerCreateAppPassword {
void copyAppPassword(const QJsonObject &src, ComAtprotoServerCreateAppPassword::AppPassword &dest)
{
    if (!src.isEmpty()) {
        dest.name = src.value("name").toString();
        dest.password = src.value("password").toString();
        dest.createdAt = src.value("createdAt").toString();
    }
}
}
// com.atproto.server.createInviteCodes
namespace ComAtprotoServerCreateInviteCodes {
void copyAccountCodes(const QJsonObject &src, ComAtprotoServerCreateInviteCodes::AccountCodes &dest)
{
    if (!src.isEmpty()) {
        dest.account = src.value("account").toString();
        for (const auto &value : src.value("codes").toArray()) {
            dest.codes.append(value.toString());
        }
    }
}
}
// com.atproto.server.describeServer
namespace ComAtprotoServerDescribeServer {
void copyLinks(const QJsonObject &src, ComAtprotoServerDescribeServer::Links &dest)
{
    if (!src.isEmpty()) {
        dest.privacyPolicy = src.value("privacyPolicy").toString();
        dest.termsOfService = src.value("termsOfService").toString();
    }
}
}
// com.atproto.server.listAppPasswords
namespace ComAtprotoServerListAppPasswords {
void copyAppPassword(const QJsonObject &src, ComAtprotoServerListAppPasswords::AppPassword &dest)
{
    if (!src.isEmpty()) {
        dest.name = src.value("name").toString();
        dest.createdAt = src.value("createdAt").toString();
    }
}
}
// com.atproto.sync.listRepos
namespace ComAtprotoSyncListRepos {
void copyRepo(const QJsonObject &src, ComAtprotoSyncListRepos::Repo &dest)
{
    if (!src.isEmpty()) {
        dest.did = src.value("did").toString();
        dest.head = src.value("head").toString();
    }
}
}
// com.atproto.sync.subscribeRepos
namespace ComAtprotoSyncSubscribeRepos {
void copyRepoOp(const QJsonObject &src, ComAtprotoSyncSubscribeRepos::RepoOp &dest)
{
    if (!src.isEmpty()) {
        dest.action = src.value("action").toString();
        dest.path = src.value("path").toString();
    }
}
void copyCommit(const QJsonObject &src, ComAtprotoSyncSubscribeRepos::Commit &dest)
{
    if (!src.isEmpty()) {
        dest.seq = src.value("seq").toInt();
        dest.rebase = src.value("rebase").toBool();
        dest.tooBig = src.value("tooBig").toBool();
        dest.repo = src.value("repo").toString();
        for (const auto &s : src.value("ops").toArray()) {
            RepoOp child;
            copyRepoOp(s.toObject(), child);
            dest.ops.append(child);
        }
        dest.time = src.value("time").toString();
    }
}
void copyHandle(const QJsonObject &src, ComAtprotoSyncSubscribeRepos::Handle &dest)
{
    if (!src.isEmpty()) {
        dest.seq = src.value("seq").toInt();
        dest.did = src.value("did").toString();
        dest.handle = src.value("handle").toString();
        dest.time = src.value("time").toString();
    }
}
void copyMigrate(const QJsonObject &src, ComAtprotoSyncSubscribeRepos::Migrate &dest)
{
    if (!src.isEmpty()) {
        dest.seq = src.value("seq").toInt();
        dest.did = src.value("did").toString();
        dest.migrateTo = src.value("migrateTo").toString();
        dest.time = src.value("time").toString();
    }
}
void copyTombstone(const QJsonObject &src, ComAtprotoSyncSubscribeRepos::Tombstone &dest)
{
    if (!src.isEmpty()) {
        dest.seq = src.value("seq").toInt();
        dest.did = src.value("did").toString();
        dest.time = src.value("time").toString();
    }
}
void copyInfo(const QJsonObject &src, ComAtprotoSyncSubscribeRepos::Info &dest)
{
    if (!src.isEmpty()) {
        dest.name = src.value("name").toString();
        dest.message = src.value("message").toString();
    }
}
}

}

#endif // LEXICONS_FUNC_CPP
