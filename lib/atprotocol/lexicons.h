// This file is generated by "defs2struct.py".
// Please do not edit.

#ifndef LEXICONS_H
#define LEXICONS_H

#include <QList>
#include <QSharedPointer>
#include <QSize>
#include <QString>
#include <QVariant>

namespace AtProtocolType {
struct Blob
{
    QString cid;
    QString mimeType;
    QString alt;
    int size = 0;
    QSize aspect_ratio;
};
enum ThreadGateType : int {
    Everybody,
    Nobody,
    Choice,
};
enum ThreadGateAllowType : int {
    Mentioned,
    Followed,
    Follower,
    List,
};
struct ThreadGateAllow
{
    ThreadGateAllowType type = ThreadGateAllowType::Mentioned;
    QString uri;
};

namespace AppBskyActorDefs {
struct ProfileView;
struct ProfileViewBasic;
}
namespace AppBskyEmbedRecord {
struct Main;
struct View;
}
namespace AppBskyFeedDefs {
struct GeneratorView;
struct ThreadViewPost;
}
namespace AppBskyRichtextFacet {
struct Main;
}

// com.atproto.label.defs
namespace ComAtprotoLabelDefs {
struct Label
{
    int ver = 0; // The AT Protocol version of the label object.
    QString src; // did , DID of the actor who created this label.
    QString uri; // uri , AT URI of the record, repository (account), or other resource that this
                 // label applies to.
    QString cid; // cid , Optionally, CID specifying the specific version of 'uri' resource this
                 // label applies to.
    QString val; // The short string name of the value or type of this label.
    bool neg = false; // If true, this is a negation label, overwriting a previous label.
    QString cts; // datetime , Timestamp when this label was created.
    QString exp; // datetime , Timestamp at which this label expires (no longer applies).
};
struct SelfLabel
{
    QString val; // The short string name of the value or type of this label.
};
struct SelfLabels
{
    QList<SelfLabel> values;
};
typedef QString LabelValue;
struct LabelValueDefinitionStrings
{
    QString lang; // language , The code of the language these strings are written in.
    QString name; // A short human-readable name for the label.
    QString description; // A longer description of what the label means and why it might be
                         // applied.
};
struct LabelValueDefinition
{
    QString identifier; // The value of the label being defined. Must only include lowercase ascii
                        // and the '-' character ([a-z-]+).
    QString severity; // How should a client visually convey this label? 'inform' means neutral and
                      // informational; 'alert' means negative and warning; 'none' means show
                      // nothing.
    QString blurs; // What should this label hide in the UI, if applied? 'content' hides all of the
                   // target; 'media' hides the images/video/audio; 'none' hides nothing.
    QString defaultSetting; // The default setting for this label.
    bool adultOnly = false; // Does the user need to have adult content enabled in order to
                            // configure this label?
    QList<LabelValueDefinitionStrings> locales;
};
}

// app.bsky.graph.defs
namespace AppBskyGraphDefs {
typedef QString ListPurpose;
struct ListViewerState
{
    bool muted = false;
    QString blocked; // at-uri
};
struct ListViewBasic
{
    QString uri; // at-uri
    QString cid; // cid
    QString name;
    ListPurpose purpose;
    QString avatar; // uri
    int listItemCount = 0;
    QList<ComAtprotoLabelDefs::Label> labels;
    ListViewerState viewer;
    QString indexedAt; // datetime
};
struct StarterPackViewBasic
{
    QString uri; // at-uri
    QString cid; // cid
    QVariant record;
    QSharedPointer<AppBskyActorDefs::ProfileViewBasic> creator;
    int listItemCount = 0;
    int joinedWeekCount = 0;
    int joinedAllTimeCount = 0;
    QList<ComAtprotoLabelDefs::Label> labels;
    QString indexedAt; // datetime
};
struct ListView
{
    QString uri; // at-uri
    QString cid; // cid
    QSharedPointer<AppBskyActorDefs::ProfileView> creator;
    QString name;
    ListPurpose purpose;
    QString description;
    QList<QSharedPointer<AppBskyRichtextFacet::Main>> descriptionFacets;
    QString avatar; // uri
    int listItemCount = 0;
    QList<ComAtprotoLabelDefs::Label> labels;
    ListViewerState viewer;
    QString indexedAt; // datetime
};
struct ListItemView
{
    QString uri; // at-uri
    QSharedPointer<AppBskyActorDefs::ProfileView> subject;
};
struct StarterPackView
{
    QString uri; // at-uri
    QString cid; // cid
    QVariant record;
    QSharedPointer<AppBskyActorDefs::ProfileViewBasic> creator;
    ListViewBasic list;
    QList<ListItemView> listItemsSample;
    QList<QSharedPointer<AppBskyFeedDefs::GeneratorView>> feeds;
    int joinedWeekCount = 0;
    int joinedAllTimeCount = 0;
    QList<ComAtprotoLabelDefs::Label> labels;
    QString indexedAt; // datetime
};
struct NotFoundActor
{
    QString actor; // at-identifier
    bool notFound = false;
};
struct Relationship
{
    QString did; // did
    QString following; // at-uri , if the actor follows this DID, this is the AT-URI of the follow
                       // record
    QString followedBy; // at-uri , if the actor is followed by this DID, contains the AT-URI of the
                        // follow record
};
}

// com.atproto.repo.strongRef
namespace ComAtprotoRepoStrongRef {
struct Main
{
    QString uri; // at-uri
    QString cid; // cid
};
// A URI with a content-hash fingerprint.
}

// app.bsky.feed.threadgate
namespace AppBskyFeedThreadgate {
enum class MainAllowType : int {
    none,
    allow_MentionRule,
    allow_FollowerRule,
    allow_FollowingRule,
    allow_ListRule,
};
struct MentionRule
{
};
struct FollowerRule
{
};
struct FollowingRule
{
};
struct ListRule
{
    QString list; // at-uri
};
struct Main
{
    QString post; // at-uri , Reference (AT-URI) to the post record.
    // union start : allow
    MainAllowType allow_type = MainAllowType::none;
    QList<MentionRule> allow_MentionRule; // List of rules defining who can reply to this post. If
                                          // value is an empty array, no one can reply. If value is
                                          // undefined, anyone can reply.
    QList<FollowerRule> allow_FollowerRule; // List of rules defining who can reply to this post. If
                                            // value is an empty array, no one can reply. If value
                                            // is undefined, anyone can reply.
    QList<FollowingRule> allow_FollowingRule; // List of rules defining who can reply to this post.
                                              // If value is an empty array, no one can reply. If
                                              // value is undefined, anyone can reply.
    QList<ListRule> allow_ListRule; // List of rules defining who can reply to this post. If value
                                    // is an empty array, no one can reply. If value is undefined,
                                    // anyone can reply.
    // union end : allow
    QString createdAt; // datetime
    QList<QString> hiddenReplies; // List of hidden reply URIs.
};
}

// app.bsky.feed.postgate
namespace AppBskyFeedPostgate {
enum class MainEmbeddingRulesType : int {
    none,
    embeddingRules_DisableRule,
};
struct DisableRule
{
};
struct Main
{
    QString createdAt; // datetime
    QString post; // at-uri , Reference (AT-URI) to the post record.
    QList<QString> detachedEmbeddingUris; // List of AT-URIs embedding this post that the author has
                                          // detached from.
    // union start : embeddingRules
    MainEmbeddingRulesType embeddingRules_type = MainEmbeddingRulesType::none;
    QList<DisableRule>
            embeddingRules_DisableRule; // List of rules defining who can embed this post. If value
                                        // is an empty array or is undefined, no particular rules
                                        // apply and anyone can embed.
    // union end : embeddingRules
};
}

// app.bsky.actor.defs
namespace AppBskyActorDefs {
enum class PostInteractionSettingsPrefThreadgateAllowRulesType : int {
    none,
    threadgateAllowRules_AppBskyFeedThreadgate_MentionRule,
    threadgateAllowRules_AppBskyFeedThreadgate_FollowerRule,
    threadgateAllowRules_AppBskyFeedThreadgate_FollowingRule,
    threadgateAllowRules_AppBskyFeedThreadgate_ListRule,
};
enum class PostInteractionSettingsPrefPostgateEmbeddingRulesType : int {
    none,
    postgateEmbeddingRules_AppBskyFeedPostgate_DisableRule,
};
struct ProfileAssociatedChat
{
    QString allowIncoming;
};
struct ProfileAssociated
{
    int lists = 0;
    int feedgens = 0;
    int starterPacks = 0;
    bool labeler = false;
    ProfileAssociatedChat chat;
};
struct KnownFollowers
{
    int count = 0;
    QList<QSharedPointer<ProfileViewBasic>> followers;
};
struct ViewerState
{
    bool muted = false;
    AppBskyGraphDefs::ListViewBasic mutedByList;
    bool blockedBy = false;
    QString blocking; // at-uri
    AppBskyGraphDefs::ListViewBasic blockingByList;
    QString following; // at-uri
    QString followedBy; // at-uri
    KnownFollowers knownFollowers;
};
struct ProfileViewBasic
{
    QString did; // did
    QString handle; // handle
    QString displayName;
    QString avatar; // uri
    ProfileAssociated associated;
    ViewerState viewer;
    QList<ComAtprotoLabelDefs::Label> labels;
    QString createdAt; // datetime
};
struct ProfileView
{
    QString did; // did
    QString handle; // handle
    QString displayName;
    QString description;
    QString avatar; // uri
    ProfileAssociated associated;
    QString indexedAt; // datetime
    QString createdAt; // datetime
    ViewerState viewer;
    QList<ComAtprotoLabelDefs::Label> labels;
};
struct ProfileViewDetailed
{
    QString did; // did
    QString handle; // handle
    QString displayName;
    QString description;
    QString avatar; // uri
    QString banner; // uri
    int followersCount = 0;
    int followsCount = 0;
    int postsCount = 0;
    ProfileAssociated associated;
    AppBskyGraphDefs::StarterPackViewBasic joinedViaStarterPack;
    QString indexedAt; // datetime
    QString createdAt; // datetime
    ViewerState viewer;
    QList<ComAtprotoLabelDefs::Label> labels;
    ComAtprotoRepoStrongRef::Main pinnedPost;
};
struct AdultContentPref
{
    bool enabled = false;
};
struct ContentLabelPref
{
    QString labelerDid; // did , Which labeler does this preference apply to? If undefined, applies
                        // globally.
    QString label;
    QString visibility;
};
struct SavedFeedsPref
{
    QList<QString> pinned;
    QList<QString> saved;
    int timelineIndex = 0;
};
struct SavedFeed
{
    QString id;
    QString type;
    QString value;
    bool pinned = false;
};
struct SavedFeedsPrefV2
{
    QList<AppBskyActorDefs::SavedFeed> items;
};
struct PersonalDetailsPref
{
    QString birthDate; // datetime , The birth date of account owner.
};
struct FeedViewPref
{
    QString feed; // The URI of the feed, or an identifier which describes the feed.
    bool hideReplies = false; // Hide replies in the feed.
    bool hideRepliesByUnfollowed =
            false; // Hide replies in the feed if they are not by followed users.
    int hideRepliesByLikeCount =
            0; // Hide replies in the feed if they do not have this number of likes.
    bool hideReposts = false; // Hide reposts in the feed.
    bool hideQuotePosts = false; // Hide quote posts in the feed.
};
struct ThreadViewPref
{
    QString sort; // Sorting mode for threads.
    bool prioritizeFollowedUsers = false; // Show followed users at the top of all replies.
};
struct InterestsPref
{
    QList<QString> tags; // A list of tags which describe the account owner's interests gathered
                         // during onboarding.
};
typedef QString MutedWordTarget;
struct MutedWord
{
    QString id;
    QString value; // The muted word itself.
    QList<AppBskyActorDefs::MutedWordTarget> targets;
    QString actorTarget; // Groups of users to apply the muted word to. If undefined, applies to all
                         // users.
    QString expiresAt; // datetime , The date and time at which the muted word will expire and no
                       // longer be applied.
};
struct MutedWordsPref
{
    QList<AppBskyActorDefs::MutedWord> items;
};
struct HiddenPostsPref
{
    QList<QString> items; // A list of URIs of posts the account owner has hidden.
};
struct BskyAppProgressGuide
{
    QString guide;
};
struct Nux
{
    QString id;
    bool completed = false;
    QString data; // Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited
                  // to 300 characters.
    QString expiresAt; // datetime , The date and time at which the NUX will expire and should be
                       // considered completed.
};
struct BskyAppStatePref
{
    BskyAppProgressGuide activeProgressGuide;
    QList<QString> queuedNudges; // An array of tokens which identify nudges (modals, popups, tours,
                                 // highlight dots) that should be shown to the user.
    QList<AppBskyActorDefs::Nux> nuxs;
};
struct LabelerPrefItem
{
    QString did; // did
};
struct LabelersPref
{
    QList<LabelerPrefItem> labelers;
};
struct PostInteractionSettingsPref
{
    // union start : threadgateAllowRules
    PostInteractionSettingsPrefThreadgateAllowRulesType threadgateAllowRules_type =
            PostInteractionSettingsPrefThreadgateAllowRulesType::none;
    QList<AppBskyFeedThreadgate::MentionRule>
            threadgateAllowRules_AppBskyFeedThreadgate_MentionRule; // Matches threadgate record.
                                                                    // List of rules defining who
                                                                    // can reply to this users
                                                                    // posts. If value is an empty
                                                                    // array, no one can reply. If
                                                                    // value is undefined, anyone
                                                                    // can reply.
    QList<AppBskyFeedThreadgate::FollowerRule>
            threadgateAllowRules_AppBskyFeedThreadgate_FollowerRule; // Matches threadgate record.
                                                                     // List of rules defining who
                                                                     // can reply to this users
                                                                     // posts. If value is an empty
                                                                     // array, no one can reply. If
                                                                     // value is undefined, anyone
                                                                     // can reply.
    QList<AppBskyFeedThreadgate::FollowingRule>
            threadgateAllowRules_AppBskyFeedThreadgate_FollowingRule; // Matches threadgate record.
                                                                      // List of rules defining who
                                                                      // can reply to this users
                                                                      // posts. If value is an empty
                                                                      // array, no one can reply. If
                                                                      // value is undefined, anyone
                                                                      // can reply.
    QList<AppBskyFeedThreadgate::ListRule>
            threadgateAllowRules_AppBskyFeedThreadgate_ListRule; // Matches threadgate record. List
                                                                 // of rules defining who can reply
                                                                 // to this users posts. If value is
                                                                 // an empty array, no one can
                                                                 // reply. If value is undefined,
                                                                 // anyone can reply.
    // union end : threadgateAllowRules
    // union start : postgateEmbeddingRules
    PostInteractionSettingsPrefPostgateEmbeddingRulesType postgateEmbeddingRules_type =
            PostInteractionSettingsPrefPostgateEmbeddingRulesType::none;
    QList<AppBskyFeedPostgate::DisableRule>
            postgateEmbeddingRules_AppBskyFeedPostgate_DisableRule; // Matches postgate record. List
                                                                    // of rules defining who can
                                                                    // embed this users posts. If
                                                                    // value is an empty array or is
                                                                    // undefined, no particular
                                                                    // rules apply and anyone can
                                                                    // embed.
    // union end : postgateEmbeddingRules
};
struct Preferences
{
    // union start : preferences
    QList<AppBskyActorDefs::AdultContentPref> adultContentPref;
    QList<AppBskyActorDefs::ContentLabelPref> contentLabelPref;
    QList<AppBskyActorDefs::SavedFeedsPref> savedFeedsPref;
    QList<AppBskyActorDefs::SavedFeedsPrefV2> savedFeedsPrefV2;
    QList<AppBskyActorDefs::PersonalDetailsPref> personalDetailsPref;
    QList<AppBskyActorDefs::FeedViewPref> feedViewPref;
    QList<AppBskyActorDefs::ThreadViewPref> threadViewPref;
    QList<AppBskyActorDefs::InterestsPref> interestsPref;
    QList<AppBskyActorDefs::MutedWordsPref> mutedWordsPref;
    QList<AppBskyActorDefs::HiddenPostsPref> hiddenPostsPref;
    QList<AppBskyActorDefs::BskyAppStatePref> bskyAppStatePref;
    QList<AppBskyActorDefs::LabelersPref> labelersPref;
    QList<AppBskyActorDefs::PostInteractionSettingsPref> postInteractionSettingsPref;
    // union end : preferences
};
}

// app.bsky.actor.profile
namespace AppBskyActorProfile {
enum class MainLabelsType : int {
    none,
    labels_ComAtprotoLabelDefs_SelfLabels,
};
struct Main
{
    QString displayName;
    QString description; // Free-form profile description text.
    Blob avatar; // Small image to be displayed next to posts from account. AKA, 'profile picture'
    Blob banner; // Larger horizontal image to display behind profile view.
    // union start : labels
    MainLabelsType labels_type = MainLabelsType::none;
    ComAtprotoLabelDefs::SelfLabels
            labels_ComAtprotoLabelDefs_SelfLabels; // Self-label values, specific to the Bluesky
                                                   // application, on the overall account.
    // union end : labels
    ComAtprotoRepoStrongRef::Main joinedViaStarterPack;
    ComAtprotoRepoStrongRef::Main pinnedPost;
    QString createdAt; // datetime
};
}

// app.bsky.embed.defs
namespace AppBskyEmbedDefs {
struct AspectRatio
{
    int width = 0;
    int height = 0;
};
}

// app.bsky.embed.external
namespace AppBskyEmbedExternal {
struct External
{
    QString uri; // uri
    QString title;
    QString description;
    Blob thumb;
};
struct Main
{
    External external;
};
struct ViewExternal
{
    QString uri; // uri
    QString title;
    QString description;
    QString thumb; // uri
};
struct View
{
    ViewExternal external;
};
}

// app.bsky.embed.images
namespace AppBskyEmbedImages {
// A set of images embedded in a Bluesky record (eg, a post).
struct Image
{
    Blob image;
    QString alt; // Alt text description of the image, for accessibility.
    AppBskyEmbedDefs::AspectRatio aspectRatio;
};
struct Main
{
    QList<Image> images;
};
struct ViewImage
{
    QString thumb; // uri , Fully-qualified URL where a thumbnail of the image can be fetched. For
                   // example, CDN location provided by the App View.
    QString fullsize; // uri , Fully-qualified URL where a large version of the image can be
                      // fetched. May or may not be the exact original blob. For example, CDN
                      // location provided by the App View.
    QString alt; // Alt text description of the image, for accessibility.
    AppBskyEmbedDefs::AspectRatio aspectRatio;
};
struct View
{
    QList<ViewImage> images;
};
}

// app.bsky.embed.video
namespace AppBskyEmbedVideo {
struct View
{
    QString cid; // cid
    QString playlist; // uri
    QString thumbnail; // uri
    QString alt;
    AppBskyEmbedDefs::AspectRatio aspectRatio;
};
struct Caption
{
    QString lang; // language
    Blob file;
};
struct Main
{
    Blob video;
    QList<Caption> captions;
    QString alt; // Alt text description of the video, for accessibility.
    AppBskyEmbedDefs::AspectRatio aspectRatio;
};
// A video embedded in a Bluesky record (eg, a post).
}

// app.bsky.embed.recordWithMedia
namespace AppBskyEmbedRecordWithMedia {
enum class MainMediaType : int {
    none,
    media_AppBskyEmbedImages_Main,
    media_AppBskyEmbedVideo_Main,
    media_AppBskyEmbedExternal_Main,
};
enum class ViewMediaType : int {
    none,
    media_AppBskyEmbedImages_View,
    media_AppBskyEmbedVideo_View,
    media_AppBskyEmbedExternal_View,
};
struct View
{
    QSharedPointer<AppBskyEmbedRecord::View> record;
    // union start : media
    ViewMediaType media_type = ViewMediaType::none;
    AppBskyEmbedImages::View media_AppBskyEmbedImages_View;
    AppBskyEmbedVideo::View media_AppBskyEmbedVideo_View;
    AppBskyEmbedExternal::View media_AppBskyEmbedExternal_View;
    // union end : media
};
// A representation of a record embedded in a Bluesky record (eg, a post), alongside other
// compatible embeds. For example, a quote post and image, or a quote post and external URL card.
struct Main
{
    QSharedPointer<AppBskyEmbedRecord::Main> record;
    // union start : media
    MainMediaType media_type = MainMediaType::none;
    AppBskyEmbedImages::Main media_AppBskyEmbedImages_Main;
    AppBskyEmbedVideo::Main media_AppBskyEmbedVideo_Main;
    AppBskyEmbedExternal::Main media_AppBskyEmbedExternal_Main;
    // union end : media
};
}

// app.bsky.richtext.facet
namespace AppBskyRichtextFacet {
enum class MainFeaturesType : int {
    none,
    features_Mention,
    features_Link,
    features_Tag,
};
struct ByteSlice
{
    int byteStart = 0;
    int byteEnd = 0;
};
struct Mention
{
    QString did; // did
};
struct Link
{
    QString uri; // uri
};
struct Tag
{
    QString tag;
};
struct Main
{
    ByteSlice index;
    // union start : features
    MainFeaturesType features_type = MainFeaturesType::none;
    QList<Mention> features_Mention;
    QList<Link> features_Link;
    QList<Tag> features_Tag;
    // union end : features
};
}

// app.bsky.feed.defs
namespace AppBskyFeedDefs {
enum class SkeletonFeedPostReasonType : int {
    none,
    reason_SkeletonReasonRepost,
    reason_SkeletonReasonPin,
};
enum class ThreadViewPostParentType : int {
    none,
    parent_ThreadViewPost,
    parent_NotFoundPost,
    parent_BlockedPost,
};
enum class ThreadViewPostRepliesType : int {
    none,
    replies_ThreadViewPost,
    replies_NotFoundPost,
    replies_BlockedPost,
};
enum class FeedViewPostReasonType : int {
    none,
    reason_ReasonRepost,
    reason_ReasonPin,
};
enum class ReplyRefRootType : int {
    none,
    root_PostView,
    root_NotFoundPost,
    root_BlockedPost,
};
enum class ReplyRefParentType : int {
    none,
    parent_PostView,
    parent_NotFoundPost,
    parent_BlockedPost,
};
enum class PostViewEmbedType : int {
    none,
    embed_AppBskyEmbedImages_View,
    embed_AppBskyEmbedVideo_View,
    embed_AppBskyEmbedExternal_View,
    embed_AppBskyEmbedRecord_View,
    embed_AppBskyEmbedRecordWithMedia_View,
};
struct BlockedAuthor
{
    QString did; // did
    AppBskyActorDefs::ViewerState viewer;
};
struct GeneratorViewerState
{
    QString like; // at-uri
};
struct GeneratorView
{
    QString uri; // at-uri
    QString cid; // cid
    QString did; // did
    AppBskyActorDefs::ProfileView creator;
    QString displayName;
    QString description;
    QList<AppBskyRichtextFacet::Main> descriptionFacets;
    QString avatar; // uri
    int likeCount = 0;
    bool acceptsInteractions = false;
    QList<ComAtprotoLabelDefs::Label> labels;
    GeneratorViewerState viewer;
    QString contentMode;
    QString indexedAt; // datetime
};
struct ViewerState
{
    QString repost; // at-uri
    QString like; // at-uri
    bool threadMuted = false;
    bool replyDisabled = false;
    bool embeddingDisabled = false;
    bool pinned = false;
};
struct ThreadgateView
{
    QString uri; // at-uri
    QString cid; // cid
    QVariant record;
    QList<AppBskyGraphDefs::ListViewBasic> lists;
};
struct PostView
{
    QString uri; // at-uri
    QString cid; // cid
    AppBskyActorDefs::ProfileViewBasic author;
    QVariant record;
    // union start : embed
    PostViewEmbedType embed_type = PostViewEmbedType::none;
    AppBskyEmbedImages::View embed_AppBskyEmbedImages_View;
    AppBskyEmbedVideo::View embed_AppBskyEmbedVideo_View;
    AppBskyEmbedExternal::View embed_AppBskyEmbedExternal_View;
    QSharedPointer<AppBskyEmbedRecord::View> embed_AppBskyEmbedRecord_View;
    AppBskyEmbedRecordWithMedia::View embed_AppBskyEmbedRecordWithMedia_View;
    // union end : embed
    int replyCount = 0;
    int repostCount = 0;
    int likeCount = 0;
    int quoteCount = 0;
    QString indexedAt; // datetime
    ViewerState viewer;
    QList<ComAtprotoLabelDefs::Label> labels;
    ThreadgateView threadgate;
};
struct ThreadContext
{
    QString rootAuthorLike; // at-uri
};
struct NotFoundPost
{
    QString uri; // at-uri
    bool notFound = false;
};
struct BlockedPost
{
    QString uri; // at-uri
    bool blocked = false;
    BlockedAuthor author;
};
struct ReplyRef
{
    // union start : root
    ReplyRefRootType root_type = ReplyRefRootType::none;
    PostView root_PostView;
    NotFoundPost root_NotFoundPost;
    BlockedPost root_BlockedPost;
    // union end : root
    // union start : parent
    ReplyRefParentType parent_type = ReplyRefParentType::none;
    PostView parent_PostView;
    NotFoundPost parent_NotFoundPost;
    BlockedPost parent_BlockedPost;
    // union end : parent
    AppBskyActorDefs::ProfileViewBasic grandparentAuthor;
};
struct ReasonRepost
{
    AppBskyActorDefs::ProfileViewBasic by;
    QString indexedAt; // datetime
};
struct ReasonPin
{
};
struct FeedViewPost
{
    PostView post;
    ReplyRef reply;
    // union start : reason
    FeedViewPostReasonType reason_type = FeedViewPostReasonType::none;
    ReasonRepost reason_ReasonRepost;
    ReasonPin reason_ReasonPin;
    // union end : reason
    QString feedContext; // Context provided by feed generator that may be passed back alongside
                         // interactions.
};
struct ThreadViewPost
{
    PostView post;
    // union start : parent
    ThreadViewPostParentType parent_type = ThreadViewPostParentType::none;
    QSharedPointer<ThreadViewPost> parent_ThreadViewPost;
    NotFoundPost parent_NotFoundPost;
    BlockedPost parent_BlockedPost;
    // union end : parent
    // union start : replies
    ThreadViewPostRepliesType replies_type = ThreadViewPostRepliesType::none;
    QList<QSharedPointer<ThreadViewPost>> replies_ThreadViewPost;
    QList<NotFoundPost> replies_NotFoundPost;
    QList<BlockedPost> replies_BlockedPost;
    // union end : replies
    ThreadContext threadContext;
};
struct SkeletonReasonRepost
{
    QString repost; // at-uri
};
struct SkeletonReasonPin
{
};
struct SkeletonFeedPost
{
    QString post; // at-uri
    // union start : reason
    SkeletonFeedPostReasonType reason_type = SkeletonFeedPostReasonType::none;
    SkeletonReasonRepost reason_SkeletonReasonRepost;
    SkeletonReasonPin reason_SkeletonReasonPin;
    // union end : reason
    QString feedContext; // Context that will be passed through to client and may be passed to feed
                         // generator back alongside interactions.
};
struct Interaction
{
    QString item; // at-uri
    QString event;
    QString feedContext; // Context on a feed item that was originally supplied by the feed
                         // generator on getFeedSkeleton.
};
}

// app.bsky.labeler.defs
namespace AppBskyLabelerDefs {
struct LabelerViewerState
{
    QString like; // at-uri
};
struct LabelerView
{
    QString uri; // at-uri
    QString cid; // cid
    AppBskyActorDefs::ProfileView creator;
    int likeCount = 0;
    LabelerViewerState viewer;
    QString indexedAt; // datetime
    QList<ComAtprotoLabelDefs::Label> labels;
};
struct LabelerPolicies
{
    QList<ComAtprotoLabelDefs::LabelValue> labelValues;
    QList<ComAtprotoLabelDefs::LabelValueDefinition> labelValueDefinitions;
};
struct LabelerViewDetailed
{
    QString uri; // at-uri
    QString cid; // cid
    AppBskyActorDefs::ProfileView creator;
    AppBskyLabelerDefs::LabelerPolicies policies;
    int likeCount = 0;
    LabelerViewerState viewer;
    QString indexedAt; // datetime
    QList<ComAtprotoLabelDefs::Label> labels;
};
}

// app.bsky.embed.record
namespace AppBskyEmbedRecord {
enum class ViewRecordType : int {
    none,
    record_ViewRecord,
    record_ViewNotFound,
    record_ViewBlocked,
    record_ViewDetached,
    record_AppBskyFeedDefs_GeneratorView,
    record_AppBskyGraphDefs_ListView,
    record_AppBskyLabelerDefs_LabelerView,
    record_AppBskyGraphDefs_StarterPackViewBasic,
};
enum class ViewRecordEmbedsType : int {
    none,
    embeds_AppBskyEmbedImages_View,
    embeds_AppBskyEmbedVideo_View,
    embeds_AppBskyEmbedExternal_View,
    embeds_AppBskyEmbedRecord_View,
    embeds_AppBskyEmbedRecordWithMedia_View,
};
// A representation of a record embedded in a Bluesky record (eg, a post). For example, a
// quote-post, or sharing a feed generator record.
struct Main
{
    ComAtprotoRepoStrongRef::Main record;
};
struct ViewRecord
{
    QString uri; // at-uri
    QString cid; // cid
    AppBskyActorDefs::ProfileViewBasic author;
    QVariant value; // The record data itself.
    QList<ComAtprotoLabelDefs::Label> labels;
    int replyCount = 0;
    int repostCount = 0;
    int likeCount = 0;
    int quoteCount = 0;
    // union start : embeds
    ViewRecordEmbedsType embeds_type = ViewRecordEmbedsType::none;
    QList<AppBskyEmbedImages::View> embeds_AppBskyEmbedImages_View;
    QList<AppBskyEmbedVideo::View> embeds_AppBskyEmbedVideo_View;
    QList<AppBskyEmbedExternal::View> embeds_AppBskyEmbedExternal_View;
    QList<QSharedPointer<AppBskyEmbedRecord::View>> embeds_AppBskyEmbedRecord_View;
    QList<AppBskyEmbedRecordWithMedia::View> embeds_AppBskyEmbedRecordWithMedia_View;
    // union end : embeds
    QString indexedAt; // datetime
};
struct ViewNotFound
{
    QString uri; // at-uri
    bool notFound = false;
};
struct ViewBlocked
{
    QString uri; // at-uri
    bool blocked = false;
    AppBskyFeedDefs::BlockedAuthor author;
};
struct ViewDetached
{
    QString uri; // at-uri
    bool detached = false;
};
struct View
{
    // union start : record
    ViewRecordType record_type = ViewRecordType::none;
    ViewRecord record_ViewRecord;
    ViewNotFound record_ViewNotFound;
    ViewBlocked record_ViewBlocked;
    ViewDetached record_ViewDetached;
    AppBskyFeedDefs::GeneratorView record_AppBskyFeedDefs_GeneratorView;
    AppBskyGraphDefs::ListView record_AppBskyGraphDefs_ListView;
    AppBskyLabelerDefs::LabelerView record_AppBskyLabelerDefs_LabelerView;
    AppBskyGraphDefs::StarterPackViewBasic record_AppBskyGraphDefs_StarterPackViewBasic;
    // union end : record
};
}

// app.bsky.feed.describeFeedGenerator
namespace AppBskyFeedDescribeFeedGenerator {
struct Feed
{
    QString uri; // at-uri
};
struct Links
{
    QString privacyPolicy;
    QString termsOfService;
};
}

// app.bsky.feed.generator
namespace AppBskyFeedGenerator {
enum class MainLabelsType : int {
    none,
    labels_ComAtprotoLabelDefs_SelfLabels,
};
struct Main
{
    QString did; // did
    QString displayName;
    QString description;
    QList<AppBskyRichtextFacet::Main> descriptionFacets;
    Blob avatar;
    bool acceptsInteractions = false; // Declaration that a feed accepts feedback interactions from
                                      // a client through app.bsky.feed.sendInteractions
    // union start : labels
    MainLabelsType labels_type = MainLabelsType::none;
    ComAtprotoLabelDefs::SelfLabels labels_ComAtprotoLabelDefs_SelfLabels; // Self-label values
    // union end : labels
    QString contentMode;
    QString createdAt; // datetime
};
}

// app.bsky.feed.getLikes
namespace AppBskyFeedGetLikes {
struct Like
{
    QString indexedAt; // datetime
    QString createdAt; // datetime
    AppBskyActorDefs::ProfileView actor;
};
}

// app.bsky.feed.like
namespace AppBskyFeedLike {
struct Main
{
    ComAtprotoRepoStrongRef::Main subject;
    QString createdAt; // datetime
};
}

// app.bsky.feed.post
namespace AppBskyFeedPost {
enum class MainEmbedType : int {
    none,
    embed_AppBskyEmbedImages_Main,
    embed_AppBskyEmbedVideo_Main,
    embed_AppBskyEmbedExternal_Main,
    embed_AppBskyEmbedRecord_Main,
    embed_AppBskyEmbedRecordWithMedia_Main,
};
enum class MainLabelsType : int {
    none,
    labels_ComAtprotoLabelDefs_SelfLabels,
};
struct TextSlice
{
    int start = 0;
    int end = 0;
};
struct Entity
{
    TextSlice index;
    QString type; // Expected values are 'mention' and 'link'.
    QString value;
};
struct ReplyRef
{
    ComAtprotoRepoStrongRef::Main root;
    ComAtprotoRepoStrongRef::Main parent;
};
struct Main
{
    QString text; // The primary post content. May be an empty string, if there are embeds.
    QList<AppBskyRichtextFacet::Main> facets;
    ReplyRef reply;
    // union start : embed
    MainEmbedType embed_type = MainEmbedType::none;
    AppBskyEmbedImages::Main embed_AppBskyEmbedImages_Main;
    AppBskyEmbedVideo::Main embed_AppBskyEmbedVideo_Main;
    AppBskyEmbedExternal::Main embed_AppBskyEmbedExternal_Main;
    AppBskyEmbedRecord::Main embed_AppBskyEmbedRecord_Main;
    AppBskyEmbedRecordWithMedia::Main embed_AppBskyEmbedRecordWithMedia_Main;
    // union end : embed
    QList<QString> langs; // Indicates human language of post primary text content.
    // union start : labels
    MainLabelsType labels_type = MainLabelsType::none;
    ComAtprotoLabelDefs::SelfLabels
            labels_ComAtprotoLabelDefs_SelfLabels; // Self-label values for this post. Effectively
                                                   // content warnings.
    // union end : labels
    QList<QString>
            tags; // Additional hashtags, in addition to any included in post text and facets.
    QString createdAt; // datetime , Client-declared timestamp when this post was originally
                       // created.
    QString via; // client name(Unofficial field) old
    QString space_aoisora_post_via; // client name(Unofficial field)
};
}

// app.bsky.feed.repost
namespace AppBskyFeedRepost {
struct Main
{
    ComAtprotoRepoStrongRef::Main subject;
    QString createdAt; // datetime
};
}

// app.bsky.graph.block
namespace AppBskyGraphBlock {
struct Main
{
    QString subject; // did , DID of the account to be blocked.
    QString createdAt; // datetime
};
}

// app.bsky.graph.follow
namespace AppBskyGraphFollow {
struct Main
{
    QString subject; // did
    QString createdAt; // datetime
};
}

// app.bsky.graph.list
namespace AppBskyGraphList {
enum class MainLabelsType : int {
    none,
    labels_ComAtprotoLabelDefs_SelfLabels,
};
struct Main
{
    AppBskyGraphDefs::ListPurpose purpose;
    QString name; // Display name for list; can not be empty.
    QString description;
    QList<AppBskyRichtextFacet::Main> descriptionFacets;
    Blob avatar;
    // union start : labels
    MainLabelsType labels_type = MainLabelsType::none;
    ComAtprotoLabelDefs::SelfLabels labels_ComAtprotoLabelDefs_SelfLabels;
    // union end : labels
    QString createdAt; // datetime
};
}

// app.bsky.graph.listblock
namespace AppBskyGraphListblock {
struct Main
{
    QString subject; // at-uri , Reference (AT-URI) to the mod list record.
    QString createdAt; // datetime
};
}

// app.bsky.graph.listitem
namespace AppBskyGraphListitem {
struct Main
{
    QString subject; // did , The account which is included on the list.
    QString list; // at-uri , Reference (AT-URI) to the list record (app.bsky.graph.list).
    QString createdAt; // datetime
};
}

// app.bsky.graph.starterpack
namespace AppBskyGraphStarterpack {
struct FeedItem
{
    QString uri; // at-uri
};
struct Main
{
    QString name; // Display name for starter pack; can not be empty.
    QString description;
    QList<AppBskyRichtextFacet::Main> descriptionFacets;
    QString list; // at-uri , Reference (AT-URI) to the list record.
    QList<FeedItem> feeds;
    QString createdAt; // datetime
};
}

// app.bsky.labeler.service
namespace AppBskyLabelerService {
enum class MainLabelsType : int {
    none,
    labels_ComAtprotoLabelDefs_SelfLabels,
};
struct Main
{
    AppBskyLabelerDefs::LabelerPolicies policies;
    // union start : labels
    MainLabelsType labels_type = MainLabelsType::none;
    ComAtprotoLabelDefs::SelfLabels labels_ComAtprotoLabelDefs_SelfLabels;
    // union end : labels
    QString createdAt; // datetime
};
}

// app.bsky.notification.listNotifications
namespace AppBskyNotificationListNotifications {
struct Notification
{
    QString uri; // at-uri
    QString cid; // cid
    AppBskyActorDefs::ProfileView author;
    QString reason; // Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote',
                    // and 'starterpack-joined'.
    QString reasonSubject; // at-uri
    QVariant record;
    bool isRead = false;
    QString indexedAt; // datetime
    QList<ComAtprotoLabelDefs::Label> labels;
};
}

// app.bsky.unspecced.defs
namespace AppBskyUnspeccedDefs {
struct SkeletonSearchPost
{
    QString uri; // at-uri
};
struct SkeletonSearchActor
{
    QString did; // did
};
struct SkeletonSearchStarterPack
{
    QString uri; // at-uri
};
struct TrendingTopic
{
    QString topic;
    QString displayName;
    QString description;
    QString link;
};
}

// app.bsky.unspecced.getTaggedSuggestions
namespace AppBskyUnspeccedGetTaggedSuggestions {
struct Suggestion
{
    QString tag;
    QString subjectType;
    QString subject; // uri
};
}

// app.bsky.video.defs
namespace AppBskyVideoDefs {
struct JobStatus
{
    QString jobId;
    QString did; // did
    QString state; // The state of the video processing job. All values not listed as a known value
                   // indicate that the job is in process.
    int progress = 0; // Progress within the current processing state.
    Blob blob;
    QString error;
    QString message;
};
}

// chat.bsky.actor.declaration
namespace ChatBskyActorDeclaration {
struct Main
{
    QString allowIncoming;
};
}

// chat.bsky.actor.defs
namespace ChatBskyActorDefs {
struct ProfileViewBasic
{
    QString did; // did
    QString handle; // handle
    QString displayName;
    QString avatar; // uri
    AppBskyActorDefs::ProfileAssociated associated;
    AppBskyActorDefs::ViewerState viewer;
    QList<ComAtprotoLabelDefs::Label> labels;
    bool chatDisabled =
            false; // Set to true when the actor cannot actively participate in converations
};
}

// chat.bsky.convo.defs
namespace ChatBskyConvoDefs {
enum class LogReadMessageMessageType : int {
    none,
    message_MessageView,
    message_DeletedMessageView,
};
enum class LogDeleteMessageMessageType : int {
    none,
    message_MessageView,
    message_DeletedMessageView,
};
enum class LogCreateMessageMessageType : int {
    none,
    message_MessageView,
    message_DeletedMessageView,
};
enum class ConvoViewLastMessageType : int {
    none,
    lastMessage_MessageView,
    lastMessage_DeletedMessageView,
};
enum class MessageViewEmbedType : int {
    none,
    embed_AppBskyEmbedRecord_View,
};
enum class MessageInputEmbedType : int {
    none,
    embed_AppBskyEmbedRecord_Main,
};
struct MessageRef
{
    QString did; // did
    QString convoId;
    QString messageId;
};
struct MessageInput
{
    QString text;
    QList<AppBskyRichtextFacet::Main> facets;
    // union start : embed
    MessageInputEmbedType embed_type = MessageInputEmbedType::none;
    AppBskyEmbedRecord::Main embed_AppBskyEmbedRecord_Main;
    // union end : embed
};
struct MessageViewSender
{
    QString did; // did
};
struct MessageView
{
    QString id;
    QString rev;
    QString text;
    QList<AppBskyRichtextFacet::Main> facets;
    // union start : embed
    MessageViewEmbedType embed_type = MessageViewEmbedType::none;
    AppBskyEmbedRecord::View embed_AppBskyEmbedRecord_View;
    // union end : embed
    MessageViewSender sender;
    QString sentAt; // datetime
};
struct DeletedMessageView
{
    QString id;
    QString rev;
    MessageViewSender sender;
    QString sentAt; // datetime
};
struct ConvoView
{
    QString id;
    QString rev;
    QList<ChatBskyActorDefs::ProfileViewBasic> members;
    // union start : lastMessage
    ConvoViewLastMessageType lastMessage_type = ConvoViewLastMessageType::none;
    MessageView lastMessage_MessageView;
    DeletedMessageView lastMessage_DeletedMessageView;
    // union end : lastMessage
    bool muted = false;
    QString status;
    int unreadCount = 0;
};
struct LogBeginConvo
{
    QString rev;
    QString convoId;
};
struct LogAcceptConvo
{
    QString rev;
    QString convoId;
};
struct LogLeaveConvo
{
    QString rev;
    QString convoId;
};
struct LogMuteConvo
{
    QString rev;
    QString convoId;
};
struct LogUnmuteConvo
{
    QString rev;
    QString convoId;
};
struct LogCreateMessage
{
    QString rev;
    QString convoId;
    // union start : message
    LogCreateMessageMessageType message_type = LogCreateMessageMessageType::none;
    MessageView message_MessageView;
    DeletedMessageView message_DeletedMessageView;
    // union end : message
};
struct LogDeleteMessage
{
    QString rev;
    QString convoId;
    // union start : message
    LogDeleteMessageMessageType message_type = LogDeleteMessageMessageType::none;
    MessageView message_MessageView;
    DeletedMessageView message_DeletedMessageView;
    // union end : message
};
struct LogReadMessage
{
    QString rev;
    QString convoId;
    // union start : message
    LogReadMessageMessageType message_type = LogReadMessageMessageType::none;
    MessageView message_MessageView;
    DeletedMessageView message_DeletedMessageView;
    // union end : message
};
}

// chat.bsky.convo.sendMessageBatch
namespace ChatBskyConvoSendMessageBatch {
struct BatchItem
{
    QString convoId;
    ChatBskyConvoDefs::MessageInput message;
};
}

// chat.bsky.moderation.getActorMetadata
namespace ChatBskyModerationGetActorMetadata {
struct Metadata
{
    int messagesSent = 0;
    int messagesReceived = 0;
    int convos = 0;
    int convosStarted = 0;
};
}

// com.atproto.server.defs
namespace ComAtprotoServerDefs {
struct InviteCodeUse
{
    QString usedBy; // did
    QString usedAt; // datetime
};
struct InviteCode
{
    QString code;
    int available = 0;
    bool disabled = false;
    QString forAccount;
    QString createdBy;
    QString createdAt; // datetime
    QList<InviteCodeUse> uses;
};
}

// com.atproto.admin.defs
namespace ComAtprotoAdminDefs {
struct StatusAttr
{
    bool applied = false;
    QString ref;
};
struct ThreatSignature
{
    QString property;
    QString value;
};
struct AccountView
{
    QString did; // did
    QString handle; // handle
    QString email;
    QString indexedAt; // datetime
    ComAtprotoServerDefs::InviteCode invitedBy;
    QList<ComAtprotoServerDefs::InviteCode> invites;
    bool invitesDisabled = false;
    QString emailConfirmedAt; // datetime
    QString inviteNote;
    QString deactivatedAt; // datetime
    QList<ThreatSignature> threatSignatures;
};
struct RepoRef
{
    QString did; // did
};
struct RepoBlobRef
{
    QString did; // did
    QString cid; // cid
    QString recordUri; // at-uri
};
}

// com.atproto.label.subscribeLabels
namespace ComAtprotoLabelSubscribeLabels {
struct Labels
{
    int seq = 0;
    QList<ComAtprotoLabelDefs::Label> labels;
};
struct Info
{
    QString name;
    QString message;
};
}

// com.atproto.lexicon.schema
namespace ComAtprotoLexiconSchema {
struct Main
{
    int lexicon = 0; // Indicates the 'version' of the Lexicon language. Must be '1' for the current
                     // atproto/Lexicon schema system.
};
}

// com.atproto.moderation.defs
namespace ComAtprotoModerationDefs {
typedef QString ReasonType;
}

// com.atproto.repo.applyWrites
namespace ComAtprotoRepoApplyWrites {
struct Create
{
    QString collection; // nsid
    QString rkey; // record-key , NOTE: maxLength is redundant with record-key format. Keeping it
                  // temporarily to ensure backwards compatibility.
    QVariant value;
};
struct Update
{
    QString collection; // nsid
    QString rkey; // record-key
    QVariant value;
};
struct Delete
{
    QString collection; // nsid
    QString rkey; // record-key
};
struct CreateResult
{
    QString uri; // at-uri
    QString cid; // cid
    QString validationStatus;
};
struct UpdateResult
{
    QString uri; // at-uri
    QString cid; // cid
    QString validationStatus;
};
struct DeleteResult
{
};
}

// com.atproto.repo.defs
namespace ComAtprotoRepoDefs {
struct CommitMeta
{
    QString cid; // cid
    QString rev; // tid
};
}

// com.atproto.repo.listMissingBlobs
namespace ComAtprotoRepoListMissingBlobs {
struct RecordBlob
{
    QString cid; // cid
    QString recordUri; // at-uri
};
}

// com.atproto.repo.listRecords
namespace ComAtprotoRepoListRecords {
struct Record
{
    QString uri; // at-uri
    QString cid; // cid
    QVariant value;
};
}

// com.atproto.server.createAppPassword
namespace ComAtprotoServerCreateAppPassword {
struct AppPassword
{
    QString name;
    QString password;
    QString createdAt; // datetime
    bool privileged = false;
};
}

// com.atproto.server.createInviteCodes
namespace ComAtprotoServerCreateInviteCodes {
struct AccountCodes
{
    QString account;
    QList<QString> codes;
};
}

// com.atproto.server.describeServer
namespace ComAtprotoServerDescribeServer {
struct Links
{
    QString privacyPolicy; // uri
    QString termsOfService; // uri
};
struct Contact
{
    QString email;
};
}

// com.atproto.server.listAppPasswords
namespace ComAtprotoServerListAppPasswords {
struct AppPassword
{
    QString name;
    QString createdAt; // datetime
    bool privileged = false;
};
}

// com.atproto.sync.listRepos
namespace ComAtprotoSyncListRepos {
struct Repo
{
    QString did; // did
    QString head; // cid , Current repo commit CID
    QString rev; // tid
    bool active = false;
    QString status; // If active=false, this optional field indicates a possible reason for why the
                    // account is not active. If active=false and no status is supplied, then the
                    // host makes no claim for why the repository is no longer being hosted.
};
}

// com.atproto.sync.listReposByCollection
namespace ComAtprotoSyncListReposByCollection {
struct Repo
{
    QString did; // did
};
}

// com.atproto.sync.subscribeRepos
namespace ComAtprotoSyncSubscribeRepos {
struct RepoOp
{
    QString action;
    QString path;
};
struct Commit
{
    int seq = 0; // The stream sequence number of this message.
    QString repo; // did , The repo this event comes from. Note that all other message types name
                  // this field 'did'.
    QString rev; // tid , The rev of the emitted commit. Note that this information is also in the
                 // commit object included in blocks, unless this is a tooBig event.
    QString since; // tid , The rev of the last emitted commit from this repo (if any).
    QList<RepoOp> ops;
    QString time; // datetime , Timestamp of when this message was originally broadcast.
};
struct Sync
{
    int seq = 0; // The stream sequence number of this message.
    QString did; // did , The account this repo event corresponds to. Must match that in the commit
                 // object.
    QString rev; // The rev of the commit. This value must match that in the commit object.
    QString time; // datetime , Timestamp of when this message was originally broadcast.
};
struct Identity
{
    int seq = 0;
    QString did; // did
    QString time; // datetime
    QString handle; // handle , The current handle for the account, or 'handle.invalid' if
                    // validation fails. This field is optional, might have been validated or
                    // passed-through from an upstream source. Semantics and behaviors for PDS vs
                    // Relay may evolve in the future; see atproto specs for more details.
};
struct Account
{
    int seq = 0;
    QString did; // did
    QString time; // datetime
    bool active = false; // Indicates that the account has a repository which can be fetched from
                         // the host that emitted this event.
    QString status; // If active=false, this optional field indicates a reason for why the account
                    // is not active.
};
struct Handle
{
    int seq = 0;
    QString did; // did
    QString handle; // handle
    QString time; // datetime
};
struct Migrate
{
    int seq = 0;
    QString did; // did
    QString migrateTo;
    QString time; // datetime
};
struct Tombstone
{
    int seq = 0;
    QString did; // did
    QString time; // datetime
};
struct Info
{
    QString name;
    QString message;
};
}

// tools.ozone.communication.defs
namespace ToolsOzoneCommunicationDefs {
struct TemplateView
{
    QString id;
    QString name; // Name of the template.
    QString subject; // Content of the template, can contain markdown and variable placeholders.
    QString contentMarkdown; // Subject of the message, used in emails.
    bool disabled = false;
    QString lang; // language , Message language.
    QString lastUpdatedBy; // did , DID of the user who last updated the template.
    QString createdAt; // datetime
    QString updatedAt; // datetime
};
}

// tools.ozone.moderation.defs
namespace ToolsOzoneModerationDefs {
enum class ModEventViewDetailEventType : int {
    none,
    event_ModEventTakedown,
    event_ModEventReverseTakedown,
    event_ModEventComment,
    event_ModEventReport,
    event_ModEventLabel,
    event_ModEventAcknowledge,
    event_ModEventEscalate,
    event_ModEventMute,
    event_ModEventUnmute,
    event_ModEventMuteReporter,
    event_ModEventUnmuteReporter,
    event_ModEventEmail,
    event_ModEventResolveAppeal,
    event_ModEventDivert,
    event_ModEventTag,
    event_AccountEvent,
    event_IdentityEvent,
    event_RecordEvent,
    event_ModEventPriorityScore,
};
enum class ModEventViewDetailSubjectType : int {
    none,
    subject_RepoView,
    subject_RepoViewNotFound,
    subject_RecordView,
    subject_RecordViewNotFound,
};
enum class BlobViewDetailsType : int {
    none,
    details_ImageDetails,
    details_VideoDetails,
};
enum class SubjectStatusViewSubjectType : int {
    none,
    subject_ComAtprotoAdminDefs_RepoRef,
    subject_ComAtprotoRepoStrongRef_Main,
};
enum class SubjectStatusViewHostingType : int {
    none,
    hosting_AccountHosting,
    hosting_RecordHosting,
};
enum class ModEventViewEventType : int {
    none,
    event_ModEventTakedown,
    event_ModEventReverseTakedown,
    event_ModEventComment,
    event_ModEventReport,
    event_ModEventLabel,
    event_ModEventAcknowledge,
    event_ModEventEscalate,
    event_ModEventMute,
    event_ModEventUnmute,
    event_ModEventMuteReporter,
    event_ModEventUnmuteReporter,
    event_ModEventEmail,
    event_ModEventResolveAppeal,
    event_ModEventDivert,
    event_ModEventTag,
    event_AccountEvent,
    event_IdentityEvent,
    event_RecordEvent,
    event_ModEventPriorityScore,
};
enum class ModEventViewSubjectType : int {
    none,
    subject_ComAtprotoAdminDefs_RepoRef,
    subject_ComAtprotoRepoStrongRef_Main,
    subject_ChatBskyConvoDefs_MessageRef,
};
struct ModEventTakedown
{
    QString comment;
    int durationInHours =
            0; // Indicates how long the takedown should be in effect before automatically expiring.
    bool acknowledgeAccountSubjects = false; // If true, all other reports on content authored by
                                             // this account will be resolved (acknowledged).
    QList<QString> policies; // Names/Keywords of the policies that drove the decision.
};
struct ModEventReverseTakedown
{
    QString comment; // Describe reasoning behind the reversal.
};
struct ModEventComment
{
    QString comment;
    bool sticky = false; // Make the comment persistent on the subject
};
struct ModEventReport
{
    QString comment;
    bool isReporterMuted =
            false; // Set to true if the reporter was muted from reporting at the time of the event.
                   // These reports won't impact the reviewState of the subject.
    ComAtprotoModerationDefs::ReasonType reportType;
};
struct ModEventLabel
{
    QString comment;
    QList<QString> createLabelVals;
    QList<QString> negateLabelVals;
    int durationInHours = 0; // Indicates how long the label will remain on the subject. Only
                             // applies on labels that are being added.
};
struct ModEventAcknowledge
{
    QString comment;
    bool acknowledgeAccountSubjects = false; // If true, all other reports on content authored by
                                             // this account will be resolved (acknowledged).
};
struct ModEventEscalate
{
    QString comment;
};
struct ModEventMute
{
    QString comment;
    int durationInHours = 0; // Indicates how long the subject should remain muted.
};
struct ModEventUnmute
{
    QString comment; // Describe reasoning behind the reversal.
};
struct ModEventMuteReporter
{
    QString comment;
    int durationInHours = 0; // Indicates how long the account should remain muted. Falsy value here
                             // means a permanent mute.
};
struct ModEventUnmuteReporter
{
    QString comment; // Describe reasoning behind the reversal.
};
struct ModEventEmail
{
    QString subjectLine; // The subject line of the email sent to the user.
    QString content; // The content of the email sent to the user.
    QString comment; // Additional comment about the outgoing comm.
};
struct ModEventResolveAppeal
{
    QString comment; // Describe resolution.
};
struct ModEventDivert
{
    QString comment;
};
struct ModEventTag
{
    QList<QString> add; // Tags to be added to the subject. If already exists, won't be duplicated.
    QList<QString> remove; // Tags to be removed to the subject. Ignores a tag If it doesn't exist,
                           // won't be duplicated.
    QString comment; // Additional comment about added/removed tags.
};
struct AccountEvent
{
    QString comment;
    bool active = false; // Indicates that the account has a repository which can be fetched from
                         // the host that emitted this event.
    QString status;
    QString timestamp; // datetime
};
struct IdentityEvent
{
    QString comment;
    QString handle; // handle
    QString pdsHost; // uri
    bool tombstone = false;
    QString timestamp; // datetime
};
struct RecordEvent
{
    QString comment;
    QString op;
    QString cid; // cid
    QString timestamp; // datetime
};
struct ModEventPriorityScore
{
    QString comment;
    int score = 0;
};
struct ModEventView
{
    int id = 0;
    // union start : event
    ModEventViewEventType event_type = ModEventViewEventType::none;
    ModEventTakedown event_ModEventTakedown;
    ModEventReverseTakedown event_ModEventReverseTakedown;
    ModEventComment event_ModEventComment;
    ModEventReport event_ModEventReport;
    ModEventLabel event_ModEventLabel;
    ModEventAcknowledge event_ModEventAcknowledge;
    ModEventEscalate event_ModEventEscalate;
    ModEventMute event_ModEventMute;
    ModEventUnmute event_ModEventUnmute;
    ModEventMuteReporter event_ModEventMuteReporter;
    ModEventUnmuteReporter event_ModEventUnmuteReporter;
    ModEventEmail event_ModEventEmail;
    ModEventResolveAppeal event_ModEventResolveAppeal;
    ModEventDivert event_ModEventDivert;
    ModEventTag event_ModEventTag;
    AccountEvent event_AccountEvent;
    IdentityEvent event_IdentityEvent;
    RecordEvent event_RecordEvent;
    ModEventPriorityScore event_ModEventPriorityScore;
    // union end : event
    // union start : subject
    ModEventViewSubjectType subject_type = ModEventViewSubjectType::none;
    ComAtprotoAdminDefs::RepoRef subject_ComAtprotoAdminDefs_RepoRef;
    ComAtprotoRepoStrongRef::Main subject_ComAtprotoRepoStrongRef_Main;
    ChatBskyConvoDefs::MessageRef subject_ChatBskyConvoDefs_MessageRef;
    // union end : subject
    QList<QString> subjectBlobCids;
    QString createdBy; // did
    QString createdAt; // datetime
    QString creatorHandle;
    QString subjectHandle;
};
struct AccountHosting
{
    QString status;
    QString updatedAt; // datetime
    QString createdAt; // datetime
    QString deletedAt; // datetime
    QString deactivatedAt; // datetime
    QString reactivatedAt; // datetime
};
struct RecordHosting
{
    QString status;
    QString updatedAt; // datetime
    QString createdAt; // datetime
    QString deletedAt; // datetime
};
typedef QString SubjectReviewState;
struct AccountStats
{
    int reportCount = 0; // Total number of reports on the account
    int appealCount = 0; // Total number of appeals against a moderation action on the account
    int suspendCount = 0; // Number of times the account was suspended
    int escalateCount = 0; // Number of times the account was escalated
    int takedownCount = 0; // Number of times the account was taken down
};
struct RecordsStats
{
    int totalReports = 0; // Cumulative sum of the number of reports on the items in the set
    int reportedCount = 0; // Number of items that were reported at least once
    int escalatedCount = 0; // Number of items that were escalated at least once
    int appealedCount = 0; // Number of items that were appealed at least once
    int subjectCount = 0; // Total number of item in the set
    int pendingCount = 0; // Number of item currently in "reviewOpen" or "reviewEscalated" state
    int processedCount = 0; // Number of item currently in "reviewNone" or "reviewClosed" state
    int takendownCount = 0; // Number of item currently taken down
};
struct SubjectStatusView
{
    int id = 0;
    // union start : subject
    SubjectStatusViewSubjectType subject_type = SubjectStatusViewSubjectType::none;
    ComAtprotoAdminDefs::RepoRef subject_ComAtprotoAdminDefs_RepoRef;
    ComAtprotoRepoStrongRef::Main subject_ComAtprotoRepoStrongRef_Main;
    // union end : subject
    // union start : hosting
    SubjectStatusViewHostingType hosting_type = SubjectStatusViewHostingType::none;
    AccountHosting hosting_AccountHosting;
    RecordHosting hosting_RecordHosting;
    // union end : hosting
    QList<QString> subjectBlobCids;
    QString subjectRepoHandle;
    QString updatedAt; // datetime , Timestamp referencing when the last update was made to the
                       // moderation status of the subject
    QString createdAt; // datetime , Timestamp referencing the first moderation status impacting
                       // event was emitted on the subject
    SubjectReviewState reviewState;
    QString comment; // Sticky comment on the subject.
    int priorityScore = 0; // Numeric value representing the level of priority. Higher score means
                           // higher priority.
    QString muteUntil; // datetime
    QString muteReportingUntil; // datetime
    QString lastReviewedBy; // did
    QString lastReviewedAt; // datetime
    QString lastReportedAt; // datetime
    QString lastAppealedAt; // datetime , Timestamp referencing when the author of the subject
                            // appealed a moderation action
    bool takendown = false;
    bool appealed = false; // True indicates that the a previously taken moderator action was
                           // appealed against, by the author of the content. False indicates last
                           // appeal was resolved by moderators.
    QString suspendUntil; // datetime
    QList<QString> tags;
    AccountStats accountStats; // Statistics related to the account subject
    RecordsStats recordsStats; // Statistics related to the record subjects authored by the
                               // subject's account
};
struct Moderation
{
    SubjectStatusView subjectStatus;
};
struct RepoView
{
    QString did; // did
    QString handle; // handle
    QString email;
    QString indexedAt; // datetime
    Moderation moderation;
    ComAtprotoServerDefs::InviteCode invitedBy;
    bool invitesDisabled = false;
    QString inviteNote;
    QString deactivatedAt; // datetime
    QList<ComAtprotoAdminDefs::ThreatSignature> threatSignatures;
};
struct RepoViewNotFound
{
    QString did; // did
};
struct RecordView
{
    QString uri; // at-uri
    QString cid; // cid
    QVariant value;
    QList<QString> blobCids;
    QString indexedAt; // datetime
    Moderation moderation;
    RepoView repo;
};
struct RecordViewNotFound
{
    QString uri; // at-uri
};
struct ImageDetails
{
    int width = 0;
    int height = 0;
};
struct VideoDetails
{
    int width = 0;
    int height = 0;
    int length = 0;
};
struct BlobView
{
    QString cid; // cid
    QString mimeType;
    int size = 0;
    QString createdAt; // datetime
    // union start : details
    BlobViewDetailsType details_type = BlobViewDetailsType::none;
    ImageDetails details_ImageDetails;
    VideoDetails details_VideoDetails;
    // union end : details
    Moderation moderation;
};
struct ModEventViewDetail
{
    int id = 0;
    // union start : event
    ModEventViewDetailEventType event_type = ModEventViewDetailEventType::none;
    ModEventTakedown event_ModEventTakedown;
    ModEventReverseTakedown event_ModEventReverseTakedown;
    ModEventComment event_ModEventComment;
    ModEventReport event_ModEventReport;
    ModEventLabel event_ModEventLabel;
    ModEventAcknowledge event_ModEventAcknowledge;
    ModEventEscalate event_ModEventEscalate;
    ModEventMute event_ModEventMute;
    ModEventUnmute event_ModEventUnmute;
    ModEventMuteReporter event_ModEventMuteReporter;
    ModEventUnmuteReporter event_ModEventUnmuteReporter;
    ModEventEmail event_ModEventEmail;
    ModEventResolveAppeal event_ModEventResolveAppeal;
    ModEventDivert event_ModEventDivert;
    ModEventTag event_ModEventTag;
    AccountEvent event_AccountEvent;
    IdentityEvent event_IdentityEvent;
    RecordEvent event_RecordEvent;
    ModEventPriorityScore event_ModEventPriorityScore;
    // union end : event
    // union start : subject
    ModEventViewDetailSubjectType subject_type = ModEventViewDetailSubjectType::none;
    RepoView subject_RepoView;
    RepoViewNotFound subject_RepoViewNotFound;
    RecordView subject_RecordView;
    RecordViewNotFound subject_RecordViewNotFound;
    // union end : subject
    QList<BlobView> subjectBlobs;
    QString createdBy; // did
    QString createdAt; // datetime
};
struct ModerationDetail
{
    SubjectStatusView subjectStatus;
};
struct RepoViewDetail
{
    QString did; // did
    QString handle; // handle
    QString email;
    QString indexedAt; // datetime
    ModerationDetail moderation;
    QList<ComAtprotoLabelDefs::Label> labels;
    ComAtprotoServerDefs::InviteCode invitedBy;
    QList<ComAtprotoServerDefs::InviteCode> invites;
    bool invitesDisabled = false;
    QString inviteNote;
    QString emailConfirmedAt; // datetime
    QString deactivatedAt; // datetime
    QList<ComAtprotoAdminDefs::ThreatSignature> threatSignatures;
};
struct RecordViewDetail
{
    QString uri; // at-uri
    QString cid; // cid
    QVariant value;
    QList<BlobView> blobs;
    QList<ComAtprotoLabelDefs::Label> labels;
    QString indexedAt; // datetime
    ModerationDetail moderation;
    RepoView repo;
};
struct ReporterStats
{
    QString did; // did
    int accountReportCount = 0; // The total number of reports made by the user on accounts.
    int recordReportCount = 0; // The total number of reports made by the user on records.
    int reportedAccountCount = 0; // The total number of accounts reported by the user.
    int reportedRecordCount = 0; // The total number of records reported by the user.
    int takendownAccountCount =
            0; // The total number of accounts taken down as a result of the user's reports.
    int takendownRecordCount =
            0; // The total number of records taken down as a result of the user's reports.
    int labeledAccountCount =
            0; // The total number of accounts labeled as a result of the user's reports.
    int labeledRecordCount =
            0; // The total number of records labeled as a result of the user's reports.
};
}

// tools.ozone.server.getConfig
namespace ToolsOzoneServerGetConfig {
struct ServiceConfig
{
    QString url; // uri
};
struct ViewerConfig
{
    QString role;
};
}

// tools.ozone.set.defs
namespace ToolsOzoneSetDefs {
struct Set
{
    QString name;
    QString description;
};
struct SetView
{
    QString name;
    QString description;
    int setSize = 0;
    QString createdAt; // datetime
    QString updatedAt; // datetime
};
}

// tools.ozone.setting.defs
namespace ToolsOzoneSettingDefs {
struct Option
{
    QString key; // nsid
    QString did; // did
    QVariant value;
    QString description;
    QString createdAt; // datetime
    QString updatedAt; // datetime
    QString managerRole;
    QString scope;
    QString createdBy; // did
    QString lastUpdatedBy; // did
};
}

// tools.ozone.signature.defs
namespace ToolsOzoneSignatureDefs {
struct SigDetail
{
    QString property;
    QString value;
};
}

// tools.ozone.signature.findRelatedAccounts
namespace ToolsOzoneSignatureFindRelatedAccounts {
struct RelatedAccount
{
    ComAtprotoAdminDefs::AccountView account;
    QList<ToolsOzoneSignatureDefs::SigDetail> similarities;
};
}

// tools.ozone.team.defs
namespace ToolsOzoneTeamDefs {
struct Member
{
    QString did; // did
    bool disabled = false;
    AppBskyActorDefs::ProfileViewDetailed profile;
    QString createdAt; // datetime
    QString updatedAt; // datetime
    QString lastUpdatedBy;
    QString role;
};
}

// blue.linkat.defs
namespace BlueLinkatDefs {
struct Card
{
    QString url; // URL of the link
    QString text; // Text of the card
    QString emoji; // Emoji of the card
};
}

// blue.linkat.board
namespace BlueLinkatBoard {
struct Main
{
    QList<BlueLinkatDefs::Card> cards;
};
}

// com.whtwnd.blog.defs
namespace ComWhtwndBlogDefs {
struct BlogEntry
{
    QString content;
    QString createdAt; // datetime
};
struct Comment
{
    QString content;
    QString entryUri; // at-uri
};
struct Ogp
{
    QString url; // uri
    int width = 0;
    int height = 0;
};
struct BlobMetadata
{
    Blob blobref;
    QString name;
};
}

// com.whtwnd.blog.entry
namespace ComWhtwndBlogEntry {
struct Main
{
    QString content;
    QString createdAt; // datetime
    QString title;
    ComWhtwndBlogDefs::Ogp ogp;
    QString theme;
    QList<ComWhtwndBlogDefs::BlobMetadata> blobs;
    QString visibility; // Tells the visibility of the article to AppView.
};
}

// directory.plc.defs
namespace DirectoryPlcDefs {
enum class PlcAuditLogDetailOperationType : int {
    none,
    operation_Plc_operation,
    operation_Plc_tombstone,
    operation_Create,
};
struct DidDocVerificationMethod
{
    QString id;
    QString type;
    QString controller;
    QString publicKeyMultibase;
};
struct DidDocService
{
    QString id;
    QString type;
    QString serviceEndpoint;
};
struct DidDoc
{
    QList<QString> context;
    QString id; // did
    QString alsoKnownAs; // at://HANDLE
    QList<DidDocVerificationMethod> verificationMethod;
    QList<DidDocService> service;
};
struct PlcLogAtprotoPds
{
    QString type;
    QString endpoint;
};
struct PlcLogService
{
    PlcLogAtprotoPds atproto_pds;
};
struct PlcLogVerificationMethods
{
    QString atproto;
};
struct Plc_operation
{
    QString type; // #plc_operation
    QList<QString> rotationKeys; // Ordered set (no duplicates) of cryptographic public keys in
                                 // did:key format
    PlcLogVerificationMethods verificationMethods; // Map (object) of application-specific
                                                   // cryptographic public keys in did:key format
    QList<QString> alsoKnownAs; // Ordered set (no duplicates) of aliases and names for this
                                // account, in the form of URIs
    PlcLogService
            services; // Map (object) of application-specific service endpoints for this account
    QString prev; // Strong reference (hash) of preceeding operation for this DID, in string CID
                  // format. Null for genesis operation
    QString sig; // Cryptographic signature of this object, with base64 string encoding
};
struct Plc_tombstone
{
    QString type; // #plc_tombstone
};
struct Create
{
    QString type; // #create
};
struct PlcAuditLogDetail
{
    QString did; // DID that this operation applies to
    // union start : operation
    PlcAuditLogDetailOperationType operation_type = PlcAuditLogDetailOperationType::none;
    Plc_operation operation_Plc_operation;
    Plc_tombstone operation_Plc_tombstone;
    Create operation_Create;
    // union end : operation
    QString cid; // Hash of the operation, in string CID format
    bool nullified = false; // Whether this operation is included in the current operation chain, or
                            // has been overridden
    QString createdAt; // datetime , Timestamp when this operation was received by the directory
                       // server
};
typedef QList<PlcAuditLogDetail> PlcAuditLog;
}

// oauth.defs
namespace OauthDefs {
struct PushedAuthorizationResponse
{
    QString request_uri;
    int expires_in = 0;
};
struct TokenResponse
{
    QString access_token;
    QString token_type;
    QString refresh_token;
    QString scope;
    QString sub;
    int expires_in = 0;
};
}

// wellKnown.defs
namespace WellKnownDefs {
struct ResourceMetadata
{
    QString resource;
    QList<QString> authorization_servers;
    QList<QString> scopes_supported;
    QList<QString> bearer_methods_supported;
    QString resource_documentation;
};
struct ServerMetadata
{
    QString issuer;
    QList<QString> response_types_supported;
    QList<QString> grant_types_supported;
    QList<QString> code_challenge_methods_supported;
    QList<QString> token_endpoint_auth_methods_supported;
    QList<QString> token_endpoint_auth_signing_alg_values_supported;
    QList<QString> scopes_supported;
    QList<QString> subject_types_supported;
    bool authorization_response_iss_parameter_supported = false;
    QString pushed_authorization_request_endpoint;
    QString token_endpoint;
    bool require_pushed_authorization_requests = false;
    QList<QString> dpop_signing_alg_values_supported;
    bool require_request_uri_registration = false;
    bool client_id_metadata_document_supported = false;
    QString authorization_endpoint;
};
}

}
Q_DECLARE_METATYPE(AtProtocolType::AppBskyFeedPost::Main)
Q_DECLARE_METATYPE(AtProtocolType::AppBskyFeedLike::Main)
Q_DECLARE_METATYPE(AtProtocolType::AppBskyFeedRepost::Main)
Q_DECLARE_METATYPE(AtProtocolType::AppBskyGraphListitem::Main)
Q_DECLARE_METATYPE(AtProtocolType::AppBskyActorProfile::Main)
Q_DECLARE_METATYPE(AtProtocolType::AppBskyGraphList::Main)
Q_DECLARE_METATYPE(AtProtocolType::AppBskyFeedThreadgate::Main)
Q_DECLARE_METATYPE(AtProtocolType::AppBskyFeedPostgate::Main)
Q_DECLARE_METATYPE(AtProtocolType::ComWhtwndBlogEntry::Main)
Q_DECLARE_METATYPE(AtProtocolType::BlueLinkatBoard::Main)
Q_DECLARE_METATYPE(AtProtocolType::DirectoryPlcDefs::DidDoc)

#endif // LEXICONS_H
